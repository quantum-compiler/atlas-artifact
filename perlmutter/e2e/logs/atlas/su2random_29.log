Num ranks: 1, myrank: 0
Computed and cached schedule in 43.212 seconds.
Current Layout0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 15, Start fusing gates...
Reset qubit group map
(0, 0) (1, 1) (2, 2) (3, 3) (4, 4) current Layout: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,15,]
Fusing Kernel (15 gates): qubits [0, 1, 2, 3, 4], gates fusion, qubits [0, 1, 2, 3, 4], gates CircuitSeq {
  Q1 = u3(Q1, P3, P4, P2)
  Q0 = u3(Q0, P0, P1, P2)
  [Q0, Q1] = cx(Q0, Q1)
  Q2 = u3(Q2, P5, P6, P2)
  [Q0, Q2] = cx(Q0, Q2)
  [Q1, Q2] = cx(Q1, Q2)
  Q3 = u3(Q3, P7, P8, P2)
  [Q0, Q3] = cx(Q0, Q3)
  [Q1, Q3] = cx(Q1, Q3)
  [Q2, Q3] = cx(Q2, Q3)
  Q4 = u3(Q4, P9, P10, P2)
  [Q0, Q4] = cx(Q0, Q4)
  [Q1, Q4] = cx(Q1, Q4)
  [Q2, Q4] = cx(Q2, Q4)
  [Q3, Q4] = cx(Q3, Q4)
}

Gate 0: [1, ]
Fusing gate 23(0) for rank 0
t 1
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 1
Matrix Multiplication (5, 1), mask 2
Gate 1: [0, ]
Fusing gate 23(0) for rank 0
t 0
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 0
Matrix Multiplication (5, 1), mask 1
Gate 2: [0, 1, ]
Fusing gate 6(1) for rank 0
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Gate 3: [2, ]
Fusing gate 23(0) for rank 0
t 2
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 2
Matrix Multiplication (5, 1), mask 4
Gate 4: [0, 2, ]
Fusing gate 6(1) for rank 0
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Gate 5: [1, 2, ]
Fusing gate 6(1) for rank 0
c,t 1,2
Matrix Multiplication (5, 2), mask 6
Fusing gate 6(1) for rank 1
c,t 1,2
Matrix Multiplication (5, 2), mask 6
Gate 6: [3, ]
Fusing gate 23(0) for rank 0
t 3
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 3
Matrix Multiplication (5, 1), mask 8
Gate 7: [0, 3, ]
Fusing gate 6(1) for rank 0
c,t 0,3
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 0,3
Matrix Multiplication (5, 2), mask 9
Gate 8: [1, 3, ]
Fusing gate 6(1) for rank 0
c,t 1,3
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 1,3
Matrix Multiplication (5, 2), mask 10
Gate 9: [2, 3, ]
Fusing gate 6(1) for rank 0
c,t 2,3
Matrix Multiplication (5, 2), mask 12
Fusing gate 6(1) for rank 1
c,t 2,3
Matrix Multiplication (5, 2), mask 12
Gate 10: [4, ]
Fusing gate 23(0) for rank 0
t 4
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 4
Matrix Multiplication (5, 1), mask 16
Gate 11: [0, 4, ]
Fusing gate 6(1) for rank 0
c,t 0,4
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 0,4
Matrix Multiplication (5, 2), mask 17
Gate 12: [1, 4, ]
Fusing gate 6(1) for rank 0
c,t 1,4
Matrix Multiplication (5, 2), mask 18
Fusing gate 6(1) for rank 1
c,t 1,4
Matrix Multiplication (5, 2), mask 18
Gate 13: [2, 4, ]
Fusing gate 6(1) for rank 0
c,t 2,4
Matrix Multiplication (5, 2), mask 20
Fusing gate 6(1) for rank 1
c,t 2,4
Matrix Multiplication (5, 2), mask 20
Gate 14: [3, 4, ]
Fusing gate 6(1) for rank 0
c,t 3,4
Matrix Multiplication (5, 2), mask 24
Fusing gate 6(1) for rank 1
c,t 3,4
Matrix Multiplication (5, 2), mask 24
SHM Kernel Physical (51): [ 5,6,7,8,9,10]
shared_memory, qubits [5, 6, 7, 8, 9, 10], gates CircuitSeq {
  Q5 = u3(Q5, P11, P12, P2)
  [Q0, Q5] = cx(Q0, Q5)
  [Q1, Q5] = cx(Q1, Q5)
  [Q2, Q5] = cx(Q2, Q5)
  [Q3, Q5] = cx(Q3, Q5)
  [Q4, Q5] = cx(Q4, Q5)
  Q6 = u3(Q6, P13, P14, P2)
  [Q0, Q6] = cx(Q0, Q6)
  [Q1, Q6] = cx(Q1, Q6)
  [Q2, Q6] = cx(Q2, Q6)
  [Q3, Q6] = cx(Q3, Q6)
  [Q4, Q6] = cx(Q4, Q6)
  [Q5, Q6] = cx(Q5, Q6)
  Q7 = u3(Q7, P15, P16, P2)
  [Q0, Q7] = cx(Q0, Q7)
  [Q1, Q7] = cx(Q1, Q7)
  [Q2, Q7] = cx(Q2, Q7)
  [Q3, Q7] = cx(Q3, Q7)
  [Q4, Q7] = cx(Q4, Q7)
  [Q5, Q7] = cx(Q5, Q7)
  [Q6, Q7] = cx(Q6, Q7)
  Q8 = u3(Q8, P17, P18, P2)
  [Q0, Q8] = cx(Q0, Q8)
  [Q1, Q8] = cx(Q1, Q8)
  [Q2, Q8] = cx(Q2, Q8)
  [Q3, Q8] = cx(Q3, Q8)
  [Q4, Q8] = cx(Q4, Q8)
  [Q5, Q8] = cx(Q5, Q8)
  [Q6, Q8] = cx(Q6, Q8)
  [Q7, Q8] = cx(Q7, Q8)
  Q9 = u3(Q9, P19, P20, P2)
  [Q0, Q9] = cx(Q0, Q9)
  [Q1, Q9] = cx(Q1, Q9)
  [Q2, Q9] = cx(Q2, Q9)
  [Q3, Q9] = cx(Q3, Q9)
  [Q4, Q9] = cx(Q4, Q9)
  [Q5, Q9] = cx(Q5, Q9)
  [Q6, Q9] = cx(Q6, Q9)
  [Q7, Q9] = cx(Q7, Q9)
  [Q8, Q9] = cx(Q8, Q9)
  Q10 = u3(Q10, P21, P22, P2)
  [Q0, Q10] = cx(Q0, Q10)
  [Q1, Q10] = cx(Q1, Q10)
  [Q2, Q10] = cx(Q2, Q10)
  [Q3, Q10] = cx(Q3, Q10)
  [Q4, Q10] = cx(Q4, Q10)
  [Q5, Q10] = cx(Q5, Q10)
  [Q6, Q10] = cx(Q6, Q10)
  [Q7, Q10] = cx(Q7, Q10)
  [Q8, Q10] = cx(Q8, Q10)
  [Q9, Q10] = cx(Q9, Q10)
}

SHM Kernel Physical (54): [ 11,12,13,14]
shared_memory, qubits [11, 12, 13, 14], gates CircuitSeq {
  Q11 = u3(Q11, P23, P24, P2)
  [Q0, Q11] = cx(Q0, Q11)
  [Q1, Q11] = cx(Q1, Q11)
  [Q2, Q11] = cx(Q2, Q11)
  [Q3, Q11] = cx(Q3, Q11)
  [Q4, Q11] = cx(Q4, Q11)
  [Q5, Q11] = cx(Q5, Q11)
  [Q6, Q11] = cx(Q6, Q11)
  [Q7, Q11] = cx(Q7, Q11)
  [Q8, Q11] = cx(Q8, Q11)
  [Q9, Q11] = cx(Q9, Q11)
  [Q10, Q11] = cx(Q10, Q11)
  Q12 = u3(Q12, P25, P26, P2)
  [Q0, Q12] = cx(Q0, Q12)
  [Q1, Q12] = cx(Q1, Q12)
  [Q2, Q12] = cx(Q2, Q12)
  [Q3, Q12] = cx(Q3, Q12)
  [Q4, Q12] = cx(Q4, Q12)
  [Q5, Q12] = cx(Q5, Q12)
  [Q6, Q12] = cx(Q6, Q12)
  [Q7, Q12] = cx(Q7, Q12)
  [Q8, Q12] = cx(Q8, Q12)
  [Q9, Q12] = cx(Q9, Q12)
  [Q10, Q12] = cx(Q10, Q12)
  [Q11, Q12] = cx(Q11, Q12)
  Q13 = u3(Q13, P27, P28, P2)
  [Q0, Q13] = cx(Q0, Q13)
  [Q1, Q13] = cx(Q1, Q13)
  [Q2, Q13] = cx(Q2, Q13)
  [Q3, Q13] = cx(Q3, Q13)
  [Q4, Q13] = cx(Q4, Q13)
  [Q5, Q13] = cx(Q5, Q13)
  [Q6, Q13] = cx(Q6, Q13)
  [Q7, Q13] = cx(Q7, Q13)
  [Q8, Q13] = cx(Q8, Q13)
  [Q9, Q13] = cx(Q9, Q13)
  [Q10, Q13] = cx(Q10, Q13)
  [Q11, Q13] = cx(Q11, Q13)
  [Q12, Q13] = cx(Q12, Q13)
  Q14 = u3(Q14, P29, P30, P2)
  [Q0, Q14] = cx(Q0, Q14)
  [Q1, Q14] = cx(Q1, Q14)
  [Q2, Q14] = cx(Q2, Q14)
  [Q3, Q14] = cx(Q3, Q14)
  [Q4, Q14] = cx(Q4, Q14)
  [Q5, Q14] = cx(Q5, Q14)
  [Q6, Q14] = cx(Q6, Q14)
  [Q7, Q14] = cx(Q7, Q14)
  [Q8, Q14] = cx(Q8, Q14)
  [Q9, Q14] = cx(Q9, Q14)
  [Q10, Q14] = cx(Q10, Q14)
  [Q11, Q14] = cx(Q11, Q14)
  [Q12, Q14] = cx(Q12, Q14)
  [Q13, Q14] = cx(Q13, Q14)
}

Current Layout0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 28, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 15, 13, SHM Kernel Physical (133): [ 27,15,16,17,18,19,20]
shared_memory, qubits [15, 16, 17, 18, 19, 20, 21], gates CircuitSeq {
  Q15 = u3(Q15, P31, P32, P2)
  [Q0, Q15] = cx(Q0, Q15)
  [Q1, Q15] = cx(Q1, Q15)
  [Q2, Q15] = cx(Q2, Q15)
  [Q3, Q15] = cx(Q3, Q15)
  [Q4, Q15] = cx(Q4, Q15)
  [Q5, Q15] = cx(Q5, Q15)
  [Q6, Q15] = cx(Q6, Q15)
  [Q7, Q15] = cx(Q7, Q15)
  [Q8, Q15] = cx(Q8, Q15)
  [Q9, Q15] = cx(Q9, Q15)
  [Q10, Q15] = cx(Q10, Q15)
  [Q11, Q15] = cx(Q11, Q15)
  [Q12, Q15] = cx(Q12, Q15)
  [Q13, Q15] = cx(Q13, Q15)
  [Q14, Q15] = cx(Q14, Q15)
  Q16 = u3(Q16, P33, P34, P2)
  [Q0, Q16] = cx(Q0, Q16)
  [Q1, Q16] = cx(Q1, Q16)
  [Q2, Q16] = cx(Q2, Q16)
  [Q3, Q16] = cx(Q3, Q16)
  [Q4, Q16] = cx(Q4, Q16)
  [Q5, Q16] = cx(Q5, Q16)
  [Q6, Q16] = cx(Q6, Q16)
  [Q7, Q16] = cx(Q7, Q16)
  [Q8, Q16] = cx(Q8, Q16)
  [Q9, Q16] = cx(Q9, Q16)
  [Q10, Q16] = cx(Q10, Q16)
  [Q11, Q16] = cx(Q11, Q16)
  [Q12, Q16] = cx(Q12, Q16)
  [Q13, Q16] = cx(Q13, Q16)
  [Q14, Q16] = cx(Q14, Q16)
  [Q15, Q16] = cx(Q15, Q16)
  Q17 = u3(Q17, P35, P36, P2)
  [Q0, Q17] = cx(Q0, Q17)
  [Q1, Q17] = cx(Q1, Q17)
  [Q2, Q17] = cx(Q2, Q17)
  [Q3, Q17] = cx(Q3, Q17)
  [Q4, Q17] = cx(Q4, Q17)
  [Q5, Q17] = cx(Q5, Q17)
  [Q6, Q17] = cx(Q6, Q17)
  [Q7, Q17] = cx(Q7, Q17)
  [Q8, Q17] = cx(Q8, Q17)
  [Q9, Q17] = cx(Q9, Q17)
  [Q10, Q17] = cx(Q10, Q17)
  [Q11, Q17] = cx(Q11, Q17)
  [Q12, Q17] = cx(Q12, Q17)
  [Q13, Q17] = cx(Q13, Q17)
  [Q14, Q17] = cx(Q14, Q17)
  [Q15, Q17] = cx(Q15, Q17)
  [Q16, Q17] = cx(Q16, Q17)
  Q18 = u3(Q18, P37, P38, P2)
  [Q0, Q18] = cx(Q0, Q18)
  [Q1, Q18] = cx(Q1, Q18)
  [Q2, Q18] = cx(Q2, Q18)
  [Q3, Q18] = cx(Q3, Q18)
  [Q4, Q18] = cx(Q4, Q18)
  [Q5, Q18] = cx(Q5, Q18)
  [Q6, Q18] = cx(Q6, Q18)
  [Q7, Q18] = cx(Q7, Q18)
  [Q8, Q18] = cx(Q8, Q18)
  [Q9, Q18] = cx(Q9, Q18)
  [Q10, Q18] = cx(Q10, Q18)
  [Q11, Q18] = cx(Q11, Q18)
  [Q12, Q18] = cx(Q12, Q18)
  [Q13, Q18] = cx(Q13, Q18)
  [Q14, Q18] = cx(Q14, Q18)
  [Q15, Q18] = cx(Q15, Q18)
  [Q16, Q18] = cx(Q16, Q18)
  [Q17, Q18] = cx(Q17, Q18)
  Q19 = u3(Q19, P39, P40, P2)
  [Q0, Q19] = cx(Q0, Q19)
  [Q1, Q19] = cx(Q1, Q19)
  [Q2, Q19] = cx(Q2, Q19)
  [Q3, Q19] = cx(Q3, Q19)
  [Q4, Q19] = cx(Q4, Q19)
  [Q5, Q19] = cx(Q5, Q19)
  [Q6, Q19] = cx(Q6, Q19)
  [Q7, Q19] = cx(Q7, Q19)
  [Q8, Q19] = cx(Q8, Q19)
  [Q9, Q19] = cx(Q9, Q19)
  [Q10, Q19] = cx(Q10, Q19)
  [Q11, Q19] = cx(Q11, Q19)
  [Q12, Q19] = cx(Q12, Q19)
  [Q13, Q19] = cx(Q13, Q19)
  [Q14, Q19] = cx(Q14, Q19)
  [Q15, Q19] = cx(Q15, Q19)
  [Q16, Q19] = cx(Q16, Q19)
  [Q17, Q19] = cx(Q17, Q19)
  [Q18, Q19] = cx(Q18, Q19)
  Q20 = u3(Q20, P41, P42, P2)
  [Q0, Q20] = cx(Q0, Q20)
  [Q1, Q20] = cx(Q1, Q20)
  [Q2, Q20] = cx(Q2, Q20)
  [Q3, Q20] = cx(Q3, Q20)
  [Q4, Q20] = cx(Q4, Q20)
  [Q5, Q20] = cx(Q5, Q20)
  [Q6, Q20] = cx(Q6, Q20)
  [Q7, Q20] = cx(Q7, Q20)
  [Q8, Q20] = cx(Q8, Q20)
  [Q9, Q20] = cx(Q9, Q20)
  [Q10, Q20] = cx(Q10, Q20)
  [Q11, Q20] = cx(Q11, Q20)
  [Q12, Q20] = cx(Q12, Q20)
  [Q13, Q20] = cx(Q13, Q20)
  [Q14, Q20] = cx(Q14, Q20)
  [Q15, Q20] = cx(Q15, Q20)
  [Q16, Q20] = cx(Q16, Q20)
  [Q17, Q20] = cx(Q17, Q20)
  [Q18, Q20] = cx(Q18, Q20)
  [Q19, Q20] = cx(Q19, Q20)
  Q21 = u3(Q21, P43, P44, P2)
  [Q0, Q21] = cx(Q0, Q21)
  [Q1, Q21] = cx(Q1, Q21)
  [Q2, Q21] = cx(Q2, Q21)
  [Q3, Q21] = cx(Q3, Q21)
  [Q4, Q21] = cx(Q4, Q21)
  [Q5, Q21] = cx(Q5, Q21)
  [Q6, Q21] = cx(Q6, Q21)
  [Q7, Q21] = cx(Q7, Q21)
  [Q8, Q21] = cx(Q8, Q21)
  [Q9, Q21] = cx(Q9, Q21)
  [Q10, Q21] = cx(Q10, Q21)
  [Q11, Q21] = cx(Q11, Q21)
  [Q12, Q21] = cx(Q12, Q21)
  [Q13, Q21] = cx(Q13, Q21)
  [Q14, Q21] = cx(Q14, Q21)
  [Q15, Q21] = cx(Q15, Q21)
  [Q16, Q21] = cx(Q16, Q21)
  [Q17, Q21] = cx(Q17, Q21)
  [Q18, Q21] = cx(Q18, Q21)
  [Q19, Q21] = cx(Q19, Q21)
  [Q20, Q21] = cx(Q20, Q21)
}

SHM Kernel Physical (153): [ 21,22,23,24,25,26]
shared_memory, qubits [22, 23, 24, 25, 26, 27], gates CircuitSeq {
  Q22 = u3(Q22, P45, P46, P2)
  [Q0, Q22] = cx(Q0, Q22)
  [Q1, Q22] = cx(Q1, Q22)
  [Q2, Q22] = cx(Q2, Q22)
  [Q3, Q22] = cx(Q3, Q22)
  [Q4, Q22] = cx(Q4, Q22)
  [Q5, Q22] = cx(Q5, Q22)
  [Q6, Q22] = cx(Q6, Q22)
  [Q7, Q22] = cx(Q7, Q22)
  [Q8, Q22] = cx(Q8, Q22)
  [Q9, Q22] = cx(Q9, Q22)
  [Q10, Q22] = cx(Q10, Q22)
  [Q11, Q22] = cx(Q11, Q22)
  [Q12, Q22] = cx(Q12, Q22)
  [Q13, Q22] = cx(Q13, Q22)
  [Q14, Q22] = cx(Q14, Q22)
  [Q15, Q22] = cx(Q15, Q22)
  [Q16, Q22] = cx(Q16, Q22)
  [Q17, Q22] = cx(Q17, Q22)
  [Q18, Q22] = cx(Q18, Q22)
  [Q19, Q22] = cx(Q19, Q22)
  [Q20, Q22] = cx(Q20, Q22)
  [Q21, Q22] = cx(Q21, Q22)
  Q23 = u3(Q23, P47, P48, P2)
  [Q0, Q23] = cx(Q0, Q23)
  [Q1, Q23] = cx(Q1, Q23)
  [Q2, Q23] = cx(Q2, Q23)
  [Q3, Q23] = cx(Q3, Q23)
  [Q4, Q23] = cx(Q4, Q23)
  [Q5, Q23] = cx(Q5, Q23)
  [Q6, Q23] = cx(Q6, Q23)
  [Q7, Q23] = cx(Q7, Q23)
  [Q8, Q23] = cx(Q8, Q23)
  [Q9, Q23] = cx(Q9, Q23)
  [Q10, Q23] = cx(Q10, Q23)
  [Q11, Q23] = cx(Q11, Q23)
  [Q12, Q23] = cx(Q12, Q23)
  [Q13, Q23] = cx(Q13, Q23)
  [Q14, Q23] = cx(Q14, Q23)
  [Q15, Q23] = cx(Q15, Q23)
  [Q16, Q23] = cx(Q16, Q23)
  [Q17, Q23] = cx(Q17, Q23)
  [Q18, Q23] = cx(Q18, Q23)
  [Q19, Q23] = cx(Q19, Q23)
  [Q20, Q23] = cx(Q20, Q23)
  [Q21, Q23] = cx(Q21, Q23)
  [Q22, Q23] = cx(Q22, Q23)
  Q24 = u3(Q24, P49, P50, P2)
  [Q0, Q24] = cx(Q0, Q24)
  [Q1, Q24] = cx(Q1, Q24)
  [Q2, Q24] = cx(Q2, Q24)
  [Q3, Q24] = cx(Q3, Q24)
  [Q4, Q24] = cx(Q4, Q24)
  [Q5, Q24] = cx(Q5, Q24)
  [Q6, Q24] = cx(Q6, Q24)
  [Q7, Q24] = cx(Q7, Q24)
  [Q8, Q24] = cx(Q8, Q24)
  [Q9, Q24] = cx(Q9, Q24)
  [Q10, Q24] = cx(Q10, Q24)
  [Q11, Q24] = cx(Q11, Q24)
  [Q12, Q24] = cx(Q12, Q24)
  [Q13, Q24] = cx(Q13, Q24)
  [Q14, Q24] = cx(Q14, Q24)
  [Q15, Q24] = cx(Q15, Q24)
  [Q16, Q24] = cx(Q16, Q24)
  [Q17, Q24] = cx(Q17, Q24)
  [Q18, Q24] = cx(Q18, Q24)
  [Q19, Q24] = cx(Q19, Q24)
  [Q20, Q24] = cx(Q20, Q24)
  [Q21, Q24] = cx(Q21, Q24)
  [Q22, Q24] = cx(Q22, Q24)
  [Q23, Q24] = cx(Q23, Q24)
  Q25 = u3(Q25, P51, P52, P2)
  [Q0, Q25] = cx(Q0, Q25)
  [Q1, Q25] = cx(Q1, Q25)
  [Q2, Q25] = cx(Q2, Q25)
  [Q3, Q25] = cx(Q3, Q25)
  [Q4, Q25] = cx(Q4, Q25)
  [Q5, Q25] = cx(Q5, Q25)
  [Q6, Q25] = cx(Q6, Q25)
  [Q7, Q25] = cx(Q7, Q25)
  [Q8, Q25] = cx(Q8, Q25)
  [Q9, Q25] = cx(Q9, Q25)
  [Q10, Q25] = cx(Q10, Q25)
  [Q11, Q25] = cx(Q11, Q25)
  [Q12, Q25] = cx(Q12, Q25)
  [Q13, Q25] = cx(Q13, Q25)
  [Q14, Q25] = cx(Q14, Q25)
  [Q15, Q25] = cx(Q15, Q25)
  [Q16, Q25] = cx(Q16, Q25)
  [Q17, Q25] = cx(Q17, Q25)
  [Q18, Q25] = cx(Q18, Q25)
  [Q19, Q25] = cx(Q19, Q25)
  [Q20, Q25] = cx(Q20, Q25)
  [Q21, Q25] = cx(Q21, Q25)
  [Q22, Q25] = cx(Q22, Q25)
  [Q23, Q25] = cx(Q23, Q25)
  [Q24, Q25] = cx(Q24, Q25)
  Q26 = u3(Q26, P53, P54, P2)
  [Q0, Q26] = cx(Q0, Q26)
  [Q1, Q26] = cx(Q1, Q26)
  [Q2, Q26] = cx(Q2, Q26)
  [Q3, Q26] = cx(Q3, Q26)
  [Q4, Q26] = cx(Q4, Q26)
  [Q5, Q26] = cx(Q5, Q26)
  [Q6, Q26] = cx(Q6, Q26)
  [Q7, Q26] = cx(Q7, Q26)
  [Q8, Q26] = cx(Q8, Q26)
  [Q9, Q26] = cx(Q9, Q26)
  [Q10, Q26] = cx(Q10, Q26)
  [Q11, Q26] = cx(Q11, Q26)
  [Q12, Q26] = cx(Q12, Q26)
  [Q13, Q26] = cx(Q13, Q26)
  [Q14, Q26] = cx(Q14, Q26)
  [Q15, Q26] = cx(Q15, Q26)
  [Q16, Q26] = cx(Q16, Q26)
  [Q17, Q26] = cx(Q17, Q26)
  [Q18, Q26] = cx(Q18, Q26)
  [Q19, Q26] = cx(Q19, Q26)
  [Q20, Q26] = cx(Q20, Q26)
  [Q21, Q26] = cx(Q21, Q26)
  [Q22, Q26] = cx(Q22, Q26)
  [Q23, Q26] = cx(Q23, Q26)
  [Q24, Q26] = cx(Q24, Q26)
  [Q25, Q26] = cx(Q25, Q26)
  Q27 = u3(Q27, P55, P56, P2)
  [Q0, Q27] = cx(Q0, Q27)
  [Q1, Q27] = cx(Q1, Q27)
  [Q2, Q27] = cx(Q2, Q27)
  [Q3, Q27] = cx(Q3, Q27)
  [Q4, Q27] = cx(Q4, Q27)
  [Q5, Q27] = cx(Q5, Q27)
  [Q6, Q27] = cx(Q6, Q27)
  [Q7, Q27] = cx(Q7, Q27)
  [Q8, Q27] = cx(Q8, Q27)
  [Q9, Q27] = cx(Q9, Q27)
  [Q10, Q27] = cx(Q10, Q27)
  [Q11, Q27] = cx(Q11, Q27)
  [Q12, Q27] = cx(Q12, Q27)
  [Q13, Q27] = cx(Q13, Q27)
  [Q14, Q27] = cx(Q14, Q27)
  [Q15, Q27] = cx(Q15, Q27)
  [Q16, Q27] = cx(Q16, Q27)
  [Q17, Q27] = cx(Q17, Q27)
  [Q18, Q27] = cx(Q18, Q27)
  [Q19, Q27] = cx(Q19, Q27)
  [Q20, Q27] = cx(Q20, Q27)
  [Q21, Q27] = cx(Q21, Q27)
  [Q22, Q27] = cx(Q22, Q27)
  [Q23, Q27] = cx(Q23, Q27)
  [Q24, Q27] = cx(Q24, Q27)
  [Q25, Q27] = cx(Q25, Q27)
  [Q26, Q27] = cx(Q26, Q27)
}

Start fusing gates...
Reset qubit group map
(0, 0) (1, 1) (2, 2) (3, 3) (13, 28) current Layout: [0,1,2,3,4,5,6,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,15,13,]
Fusing Kernel (15 gates): qubits [0, 1, 2, 3, 28], gates fusion, qubits [0, 1, 2, 3, 28], gates CircuitSeq {
  Q28 = u3(Q28, P57, P58, P2)
  [Q0, Q28] = cx(Q0, Q28)
  [Q1, Q28] = cx(Q1, Q28)
  Q1 = u3(Q1, P61, P62, P2)
  Q0 = u3(Q0, P59, P60, P2)
  [Q0, Q1] = cx(Q0, Q1)
  [Q2, Q28] = cx(Q2, Q28)
  Q2 = u3(Q2, P63, P64, P2)
  [Q0, Q2] = cx(Q0, Q2)
  [Q1, Q2] = cx(Q1, Q2)
  [Q3, Q28] = cx(Q3, Q28)
  Q3 = u3(Q3, P65, P66, P2)
  [Q0, Q3] = cx(Q0, Q3)
  [Q1, Q3] = cx(Q1, Q3)
  [Q2, Q3] = cx(Q2, Q3)
}

Gate 0: [28, ]
Fusing gate 23(0) for rank 0
t 28
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 28
Matrix Multiplication (5, 1), mask 16
Gate 1: [0, 28, ]
Fusing gate 6(1) for rank 0
c,t 0,28
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 0,28
Matrix Multiplication (5, 2), mask 17
Gate 2: [1, 28, ]
Fusing gate 6(1) for rank 0
c,t 1,28
Matrix Multiplication (5, 2), mask 18
Fusing gate 6(1) for rank 1
c,t 1,28
Matrix Multiplication (5, 2), mask 18
Gate 3: [1, ]
Fusing gate 23(0) for rank 0
t 1
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 1
Matrix Multiplication (5, 1), mask 2
Gate 4: [0, ]
Fusing gate 23(0) for rank 0
t 0
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 0
Matrix Multiplication (5, 1), mask 1
Gate 5: [0, 1, ]
Fusing gate 6(1) for rank 0
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Gate 6: [2, 28, ]
Fusing gate 6(1) for rank 0
c,t 2,28
Matrix Multiplication (5, 2), mask 20
Fusing gate 6(1) for rank 1
c,t 2,28
Matrix Multiplication (5, 2), mask 20
Gate 7: [2, ]
Fusing gate 23(0) for rank 0
t 2
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 2
Matrix Multiplication (5, 1), mask 4
Gate 8: [0, 2, ]
Fusing gate 6(1) for rank 0
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Gate 9: [1, 2, ]
Fusing gate 6(1) for rank 0
c,t 1,2
Matrix Multiplication (5, 2), mask 6
Fusing gate 6(1) for rank 1
c,t 1,2
Matrix Multiplication (5, 2), mask 6
Gate 10: [3, 28, ]
Fusing gate 6(1) for rank 0
c,t 3,28
Matrix Multiplication (5, 2), mask 24
Fusing gate 6(1) for rank 1
c,t 3,28
Matrix Multiplication (5, 2), mask 24
Gate 11: [3, ]
Fusing gate 23(0) for rank 0
t 3
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 3
Matrix Multiplication (5, 1), mask 8
Gate 12: [0, 3, ]
Fusing gate 6(1) for rank 0
c,t 0,3
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 0,3
Matrix Multiplication (5, 2), mask 9
Gate 13: [1, 3, ]
Fusing gate 6(1) for rank 0
c,t 1,3
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 1,3
Matrix Multiplication (5, 2), mask 10
Gate 14: [2, 3, ]
Fusing gate 6(1) for rank 0
c,t 2,3
Matrix Multiplication (5, 2), mask 12
Fusing gate 6(1) for rank 1
c,t 2,3
Matrix Multiplication (5, 2), mask 12
SHM Kernel Physical (59): [ 4,5,6,7,8,13]
shared_memory, qubits [4, 5, 6, 7, 8, 28], gates CircuitSeq {
  [Q4, Q28] = cx(Q4, Q28)
  Q4 = u3(Q4, P67, P68, P2)
  [Q0, Q4] = cx(Q0, Q4)
  [Q1, Q4] = cx(Q1, Q4)
  [Q2, Q4] = cx(Q2, Q4)
  [Q3, Q4] = cx(Q3, Q4)
  [Q5, Q28] = cx(Q5, Q28)
  Q5 = u3(Q5, P69, P70, P2)
  [Q0, Q5] = cx(Q0, Q5)
  [Q1, Q5] = cx(Q1, Q5)
  [Q2, Q5] = cx(Q2, Q5)
  [Q3, Q5] = cx(Q3, Q5)
  [Q4, Q5] = cx(Q4, Q5)
  [Q6, Q28] = cx(Q6, Q28)
  Q6 = u3(Q6, P71, P72, P2)
  [Q0, Q6] = cx(Q0, Q6)
  [Q1, Q6] = cx(Q1, Q6)
  [Q2, Q6] = cx(Q2, Q6)
  [Q3, Q6] = cx(Q3, Q6)
  [Q4, Q6] = cx(Q4, Q6)
  [Q5, Q6] = cx(Q5, Q6)
  [Q7, Q28] = cx(Q7, Q28)
  Q7 = u3(Q7, P73, P74, P2)
  [Q0, Q7] = cx(Q0, Q7)
  [Q1, Q7] = cx(Q1, Q7)
  [Q2, Q7] = cx(Q2, Q7)
  [Q3, Q7] = cx(Q3, Q7)
  [Q4, Q7] = cx(Q4, Q7)
  [Q5, Q7] = cx(Q5, Q7)
  [Q6, Q7] = cx(Q6, Q7)
  [Q8, Q28] = cx(Q8, Q28)
  Q8 = u3(Q8, P75, P76, P2)
  [Q0, Q8] = cx(Q0, Q8)
  [Q1, Q8] = cx(Q1, Q8)
  [Q2, Q8] = cx(Q2, Q8)
  [Q3, Q8] = cx(Q3, Q8)
  [Q4, Q8] = cx(Q4, Q8)
  [Q5, Q8] = cx(Q5, Q8)
  [Q6, Q8] = cx(Q6, Q8)
  [Q7, Q8] = cx(Q7, Q8)
  [Q9, Q28] = cx(Q9, Q28)
  [Q10, Q28] = cx(Q10, Q28)
  [Q11, Q28] = cx(Q11, Q28)
  [Q12, Q28] = cx(Q12, Q28)
  [Q13, Q28] = cx(Q13, Q28)
  [Q14, Q28] = cx(Q14, Q28)
  [Q15, Q28] = cx(Q15, Q28)
  [Q16, Q28] = cx(Q16, Q28)
  [Q17, Q28] = cx(Q17, Q28)
  [Q18, Q28] = cx(Q18, Q28)
  [Q19, Q28] = cx(Q19, Q28)
  [Q20, Q28] = cx(Q20, Q28)
  [Q21, Q28] = cx(Q21, Q28)
  [Q22, Q28] = cx(Q22, Q28)
  [Q23, Q28] = cx(Q23, Q28)
  [Q24, Q28] = cx(Q24, Q28)
  [Q25, Q28] = cx(Q25, Q28)
  [Q26, Q28] = cx(Q26, Q28)
  [Q27, Q28] = cx(Q27, Q28)
}

SHM Kernel Physical (46): [ 9,10,11,12,13]
shared_memory, qubits [9, 10, 11, 12, 28], gates CircuitSeq {
  Q9 = u3(Q9, P115, P116, P2)
  [Q0, Q9] = cx(Q0, Q9)
  Q10 = u3(Q10, P77, P78, P2)
  [Q0, Q10] = cx(Q0, Q10)
  Q11 = u3(Q11, P79, P80, P2)
  [Q0, Q11] = cx(Q0, Q11)
  Q12 = u3(Q12, P81, P82, P2)
  [Q0, Q12] = cx(Q0, Q12)
  [Q1, Q9] = cx(Q1, Q9)
  [Q1, Q10] = cx(Q1, Q10)
  [Q1, Q11] = cx(Q1, Q11)
  [Q1, Q12] = cx(Q1, Q12)
  [Q2, Q9] = cx(Q2, Q9)
  [Q2, Q10] = cx(Q2, Q10)
  [Q2, Q11] = cx(Q2, Q11)
  [Q2, Q12] = cx(Q2, Q12)
  [Q3, Q9] = cx(Q3, Q9)
  [Q3, Q10] = cx(Q3, Q10)
  [Q3, Q11] = cx(Q3, Q11)
  [Q3, Q12] = cx(Q3, Q12)
  [Q4, Q9] = cx(Q4, Q9)
  [Q4, Q10] = cx(Q4, Q10)
  [Q4, Q11] = cx(Q4, Q11)
  [Q4, Q12] = cx(Q4, Q12)
  [Q5, Q9] = cx(Q5, Q9)
  [Q5, Q10] = cx(Q5, Q10)
  [Q5, Q11] = cx(Q5, Q11)
  [Q5, Q12] = cx(Q5, Q12)
  [Q6, Q9] = cx(Q6, Q9)
  [Q6, Q10] = cx(Q6, Q10)
  [Q6, Q11] = cx(Q6, Q11)
  [Q6, Q12] = cx(Q6, Q12)
  [Q7, Q9] = cx(Q7, Q9)
  [Q7, Q10] = cx(Q7, Q10)
  [Q7, Q11] = cx(Q7, Q11)
  [Q7, Q12] = cx(Q7, Q12)
  [Q8, Q9] = cx(Q8, Q9)
  [Q8, Q10] = cx(Q8, Q10)
  [Q8, Q11] = cx(Q8, Q11)
  [Q8, Q12] = cx(Q8, Q12)
  [Q9, Q10] = cx(Q9, Q10)
  [Q9, Q11] = cx(Q9, Q11)
  [Q10, Q11] = cx(Q10, Q11)
  [Q9, Q12] = cx(Q9, Q12)
  [Q10, Q12] = cx(Q10, Q12)
  [Q11, Q12] = cx(Q11, Q12)
}

Current Layout0: [0, 1, 2, 3, 4, 5, 15, 7, 8, 9, 10, 11, 12, 28, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 13, 6, SHM Kernel Physical (119): [ 27,14,6,15,16,17,18]
shared_memory, qubits [13, 14, 15, 16, 17, 18, 19], gates CircuitSeq {
  Q13 = u3(Q13, P83, P84, P2)
  [Q0, Q13] = cx(Q0, Q13)
  Q14 = u3(Q14, P85, P86, P2)
  [Q0, Q14] = cx(Q0, Q14)
  Q15 = u3(Q15, P87, P88, P2)
  [Q0, Q15] = cx(Q0, Q15)
  Q16 = u3(Q16, P89, P90, P2)
  [Q0, Q16] = cx(Q0, Q16)
  Q17 = u3(Q17, P91, P92, P2)
  [Q0, Q17] = cx(Q0, Q17)
  Q18 = u3(Q18, P93, P94, P2)
  [Q0, Q18] = cx(Q0, Q18)
  Q19 = u3(Q19, P95, P96, P2)
  [Q0, Q19] = cx(Q0, Q19)
  [Q1, Q13] = cx(Q1, Q13)
  [Q1, Q14] = cx(Q1, Q14)
  [Q1, Q15] = cx(Q1, Q15)
  [Q1, Q16] = cx(Q1, Q16)
  [Q1, Q17] = cx(Q1, Q17)
  [Q1, Q18] = cx(Q1, Q18)
  [Q1, Q19] = cx(Q1, Q19)
  [Q2, Q13] = cx(Q2, Q13)
  [Q2, Q14] = cx(Q2, Q14)
  [Q2, Q15] = cx(Q2, Q15)
  [Q2, Q16] = cx(Q2, Q16)
  [Q2, Q17] = cx(Q2, Q17)
  [Q2, Q18] = cx(Q2, Q18)
  [Q2, Q19] = cx(Q2, Q19)
  [Q3, Q13] = cx(Q3, Q13)
  [Q3, Q14] = cx(Q3, Q14)
  [Q3, Q15] = cx(Q3, Q15)
  [Q3, Q16] = cx(Q3, Q16)
  [Q3, Q17] = cx(Q3, Q17)
  [Q3, Q18] = cx(Q3, Q18)
  [Q3, Q19] = cx(Q3, Q19)
  [Q4, Q13] = cx(Q4, Q13)
  [Q4, Q14] = cx(Q4, Q14)
  [Q4, Q15] = cx(Q4, Q15)
  [Q4, Q16] = cx(Q4, Q16)
  [Q4, Q17] = cx(Q4, Q17)
  [Q4, Q18] = cx(Q4, Q18)
  [Q4, Q19] = cx(Q4, Q19)
  [Q5, Q13] = cx(Q5, Q13)
  [Q5, Q14] = cx(Q5, Q14)
  [Q5, Q15] = cx(Q5, Q15)
  [Q5, Q16] = cx(Q5, Q16)
  [Q5, Q17] = cx(Q5, Q17)
  [Q5, Q18] = cx(Q5, Q18)
  [Q5, Q19] = cx(Q5, Q19)
  [Q6, Q13] = cx(Q6, Q13)
  [Q7, Q13] = cx(Q7, Q13)
  [Q6, Q14] = cx(Q6, Q14)
  [Q7, Q14] = cx(Q7, Q14)
  [Q6, Q15] = cx(Q6, Q15)
  [Q7, Q15] = cx(Q7, Q15)
  [Q6, Q16] = cx(Q6, Q16)
  [Q7, Q16] = cx(Q7, Q16)
  [Q6, Q17] = cx(Q6, Q17)
  [Q7, Q17] = cx(Q7, Q17)
  [Q6, Q18] = cx(Q6, Q18)
  [Q7, Q18] = cx(Q7, Q18)
  [Q6, Q19] = cx(Q6, Q19)
  [Q7, Q19] = cx(Q7, Q19)
  [Q8, Q13] = cx(Q8, Q13)
  [Q8, Q14] = cx(Q8, Q14)
  [Q8, Q15] = cx(Q8, Q15)
  [Q8, Q16] = cx(Q8, Q16)
  [Q8, Q17] = cx(Q8, Q17)
  [Q8, Q18] = cx(Q8, Q18)
  [Q8, Q19] = cx(Q8, Q19)
  [Q9, Q13] = cx(Q9, Q13)
  [Q10, Q13] = cx(Q10, Q13)
  [Q11, Q13] = cx(Q11, Q13)
  [Q12, Q13] = cx(Q12, Q13)
  [Q9, Q14] = cx(Q9, Q14)
  [Q10, Q14] = cx(Q10, Q14)
  [Q11, Q14] = cx(Q11, Q14)
  [Q12, Q14] = cx(Q12, Q14)
  [Q13, Q14] = cx(Q13, Q14)
  [Q9, Q15] = cx(Q9, Q15)
  [Q10, Q15] = cx(Q10, Q15)
  [Q11, Q15] = cx(Q11, Q15)
  [Q12, Q15] = cx(Q12, Q15)
  [Q13, Q15] = cx(Q13, Q15)
  [Q14, Q15] = cx(Q14, Q15)
  [Q9, Q16] = cx(Q9, Q16)
  [Q10, Q16] = cx(Q10, Q16)
  [Q11, Q16] = cx(Q11, Q16)
  [Q12, Q16] = cx(Q12, Q16)
  [Q13, Q16] = cx(Q13, Q16)
  [Q14, Q16] = cx(Q14, Q16)
  [Q15, Q16] = cx(Q15, Q16)
  [Q9, Q17] = cx(Q9, Q17)
  [Q10, Q17] = cx(Q10, Q17)
  [Q11, Q17] = cx(Q11, Q17)
  [Q12, Q17] = cx(Q12, Q17)
  [Q13, Q17] = cx(Q13, Q17)
  [Q14, Q17] = cx(Q14, Q17)
  [Q15, Q17] = cx(Q15, Q17)
  [Q16, Q17] = cx(Q16, Q17)
  [Q9, Q18] = cx(Q9, Q18)
  [Q10, Q18] = cx(Q10, Q18)
  [Q11, Q18] = cx(Q11, Q18)
  [Q12, Q18] = cx(Q12, Q18)
  [Q13, Q18] = cx(Q13, Q18)
  [Q14, Q18] = cx(Q14, Q18)
  [Q15, Q18] = cx(Q15, Q18)
  [Q16, Q18] = cx(Q16, Q18)
  [Q17, Q18] = cx(Q17, Q18)
  [Q9, Q19] = cx(Q9, Q19)
  [Q10, Q19] = cx(Q10, Q19)
  [Q11, Q19] = cx(Q11, Q19)
  [Q12, Q19] = cx(Q12, Q19)
  [Q13, Q19] = cx(Q13, Q19)
  [Q14, Q19] = cx(Q14, Q19)
  [Q15, Q19] = cx(Q15, Q19)
  [Q16, Q19] = cx(Q16, Q19)
  [Q17, Q19] = cx(Q17, Q19)
  [Q18, Q19] = cx(Q18, Q19)
}

SHM Kernel Physical (168): [ 19,20,21,22,23,24,25]
shared_memory, qubits [20, 21, 22, 23, 24, 25, 26], gates CircuitSeq {
  Q20 = u3(Q20, P97, P98, P2)
  [Q0, Q20] = cx(Q0, Q20)
  Q21 = u3(Q21, P99, P100, P2)
  [Q0, Q21] = cx(Q0, Q21)
  Q22 = u3(Q22, P101, P102, P2)
  [Q0, Q22] = cx(Q0, Q22)
  Q23 = u3(Q23, P103, P104, P2)
  [Q0, Q23] = cx(Q0, Q23)
  Q24 = u3(Q24, P105, P106, P2)
  [Q0, Q24] = cx(Q0, Q24)
  Q25 = u3(Q25, P107, P108, P2)
  [Q0, Q25] = cx(Q0, Q25)
  Q26 = u3(Q26, P109, P110, P2)
  [Q0, Q26] = cx(Q0, Q26)
  [Q1, Q20] = cx(Q1, Q20)
  [Q1, Q21] = cx(Q1, Q21)
  [Q1, Q22] = cx(Q1, Q22)
  [Q1, Q23] = cx(Q1, Q23)
  [Q1, Q24] = cx(Q1, Q24)
  [Q1, Q25] = cx(Q1, Q25)
  [Q1, Q26] = cx(Q1, Q26)
  [Q2, Q20] = cx(Q2, Q20)
  [Q2, Q21] = cx(Q2, Q21)
  [Q2, Q22] = cx(Q2, Q22)
  [Q2, Q23] = cx(Q2, Q23)
  [Q2, Q24] = cx(Q2, Q24)
  [Q2, Q25] = cx(Q2, Q25)
  [Q2, Q26] = cx(Q2, Q26)
  [Q3, Q20] = cx(Q3, Q20)
  [Q3, Q21] = cx(Q3, Q21)
  [Q3, Q22] = cx(Q3, Q22)
  [Q3, Q23] = cx(Q3, Q23)
  [Q3, Q24] = cx(Q3, Q24)
  [Q3, Q25] = cx(Q3, Q25)
  [Q3, Q26] = cx(Q3, Q26)
  [Q4, Q20] = cx(Q4, Q20)
  [Q4, Q21] = cx(Q4, Q21)
  [Q4, Q22] = cx(Q4, Q22)
  [Q4, Q23] = cx(Q4, Q23)
  [Q4, Q24] = cx(Q4, Q24)
  [Q4, Q25] = cx(Q4, Q25)
  [Q4, Q26] = cx(Q4, Q26)
  [Q5, Q20] = cx(Q5, Q20)
  [Q5, Q21] = cx(Q5, Q21)
  [Q5, Q22] = cx(Q5, Q22)
  [Q5, Q23] = cx(Q5, Q23)
  [Q5, Q24] = cx(Q5, Q24)
  [Q5, Q25] = cx(Q5, Q25)
  [Q5, Q26] = cx(Q5, Q26)
  [Q6, Q20] = cx(Q6, Q20)
  [Q7, Q20] = cx(Q7, Q20)
  [Q6, Q21] = cx(Q6, Q21)
  [Q7, Q21] = cx(Q7, Q21)
  [Q6, Q22] = cx(Q6, Q22)
  [Q7, Q22] = cx(Q7, Q22)
  [Q6, Q23] = cx(Q6, Q23)
  [Q7, Q23] = cx(Q7, Q23)
  [Q6, Q24] = cx(Q6, Q24)
  [Q7, Q24] = cx(Q7, Q24)
  [Q6, Q25] = cx(Q6, Q25)
  [Q7, Q25] = cx(Q7, Q25)
  [Q6, Q26] = cx(Q6, Q26)
  [Q7, Q26] = cx(Q7, Q26)
  [Q8, Q20] = cx(Q8, Q20)
  [Q8, Q21] = cx(Q8, Q21)
  [Q8, Q22] = cx(Q8, Q22)
  [Q8, Q23] = cx(Q8, Q23)
  [Q8, Q24] = cx(Q8, Q24)
  [Q8, Q25] = cx(Q8, Q25)
  [Q8, Q26] = cx(Q8, Q26)
  [Q9, Q20] = cx(Q9, Q20)
  [Q10, Q20] = cx(Q10, Q20)
  [Q11, Q20] = cx(Q11, Q20)
  [Q12, Q20] = cx(Q12, Q20)
  [Q13, Q20] = cx(Q13, Q20)
  [Q14, Q20] = cx(Q14, Q20)
  [Q15, Q20] = cx(Q15, Q20)
  [Q16, Q20] = cx(Q16, Q20)
  [Q17, Q20] = cx(Q17, Q20)
  [Q18, Q20] = cx(Q18, Q20)
  [Q19, Q20] = cx(Q19, Q20)
  [Q9, Q21] = cx(Q9, Q21)
  [Q10, Q21] = cx(Q10, Q21)
  [Q11, Q21] = cx(Q11, Q21)
  [Q12, Q21] = cx(Q12, Q21)
  [Q13, Q21] = cx(Q13, Q21)
  [Q14, Q21] = cx(Q14, Q21)
  [Q15, Q21] = cx(Q15, Q21)
  [Q16, Q21] = cx(Q16, Q21)
  [Q17, Q21] = cx(Q17, Q21)
  [Q18, Q21] = cx(Q18, Q21)
  [Q19, Q21] = cx(Q19, Q21)
  [Q20, Q21] = cx(Q20, Q21)
  [Q9, Q22] = cx(Q9, Q22)
  [Q10, Q22] = cx(Q10, Q22)
  [Q11, Q22] = cx(Q11, Q22)
  [Q12, Q22] = cx(Q12, Q22)
  [Q13, Q22] = cx(Q13, Q22)
  [Q14, Q22] = cx(Q14, Q22)
  [Q15, Q22] = cx(Q15, Q22)
  [Q16, Q22] = cx(Q16, Q22)
  [Q17, Q22] = cx(Q17, Q22)
  [Q18, Q22] = cx(Q18, Q22)
  [Q19, Q22] = cx(Q19, Q22)
  [Q20, Q22] = cx(Q20, Q22)
  [Q21, Q22] = cx(Q21, Q22)
  [Q9, Q23] = cx(Q9, Q23)
  [Q10, Q23] = cx(Q10, Q23)
  [Q11, Q23] = cx(Q11, Q23)
  [Q12, Q23] = cx(Q12, Q23)
  [Q13, Q23] = cx(Q13, Q23)
  [Q14, Q23] = cx(Q14, Q23)
  [Q15, Q23] = cx(Q15, Q23)
  [Q16, Q23] = cx(Q16, Q23)
  [Q17, Q23] = cx(Q17, Q23)
  [Q18, Q23] = cx(Q18, Q23)
  [Q19, Q23] = cx(Q19, Q23)
  [Q20, Q23] = cx(Q20, Q23)
  [Q21, Q23] = cx(Q21, Q23)
  [Q22, Q23] = cx(Q22, Q23)
  [Q9, Q24] = cx(Q9, Q24)
  [Q10, Q24] = cx(Q10, Q24)
  [Q11, Q24] = cx(Q11, Q24)
  [Q12, Q24] = cx(Q12, Q24)
  [Q13, Q24] = cx(Q13, Q24)
  [Q14, Q24] = cx(Q14, Q24)
  [Q15, Q24] = cx(Q15, Q24)
  [Q16, Q24] = cx(Q16, Q24)
  [Q17, Q24] = cx(Q17, Q24)
  [Q18, Q24] = cx(Q18, Q24)
  [Q19, Q24] = cx(Q19, Q24)
  [Q20, Q24] = cx(Q20, Q24)
  [Q21, Q24] = cx(Q21, Q24)
  [Q22, Q24] = cx(Q22, Q24)
  [Q23, Q24] = cx(Q23, Q24)
  [Q9, Q25] = cx(Q9, Q25)
  [Q10, Q25] = cx(Q10, Q25)
  [Q11, Q25] = cx(Q11, Q25)
  [Q12, Q25] = cx(Q12, Q25)
  [Q13, Q25] = cx(Q13, Q25)
  [Q14, Q25] = cx(Q14, Q25)
  [Q15, Q25] = cx(Q15, Q25)
  [Q16, Q25] = cx(Q16, Q25)
  [Q17, Q25] = cx(Q17, Q25)
  [Q18, Q25] = cx(Q18, Q25)
  [Q19, Q25] = cx(Q19, Q25)
  [Q20, Q25] = cx(Q20, Q25)
  [Q21, Q25] = cx(Q21, Q25)
  [Q22, Q25] = cx(Q22, Q25)
  [Q23, Q25] = cx(Q23, Q25)
  [Q24, Q25] = cx(Q24, Q25)
  [Q9, Q26] = cx(Q9, Q26)
  [Q10, Q26] = cx(Q10, Q26)
  [Q11, Q26] = cx(Q11, Q26)
  [Q12, Q26] = cx(Q12, Q26)
  [Q13, Q26] = cx(Q13, Q26)
  [Q14, Q26] = cx(Q14, Q26)
  [Q15, Q26] = cx(Q15, Q26)
  [Q16, Q26] = cx(Q16, Q26)
  [Q17, Q26] = cx(Q17, Q26)
  [Q18, Q26] = cx(Q18, Q26)
  [Q19, Q26] = cx(Q19, Q26)
  [Q20, Q26] = cx(Q20, Q26)
  [Q21, Q26] = cx(Q21, Q26)
  [Q22, Q26] = cx(Q22, Q26)
  [Q23, Q26] = cx(Q23, Q26)
  [Q24, Q26] = cx(Q24, Q26)
  [Q25, Q26] = cx(Q25, Q26)
}

Start fusing gates...
Reset qubit group map
(0, 0) (1, 1) (2, 2) (13, 28) (26, 27) current Layout: [0,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,13,6,]
Fusing Kernel (14 gates): qubits [0, 1, 2, 27, 28], gates fusion, qubits [0, 1, 2, 27, 28], gates CircuitSeq {
  Q27 = u3(Q27, P111, P112, P2)
  [Q0, Q27] = cx(Q0, Q27)
  Q28 = u3(Q28, P113, P114, P2)
  [Q0, Q28] = cx(Q0, Q28)
  [Q1, Q27] = cx(Q1, Q27)
  [Q1, Q28] = cx(Q1, Q28)
  Q1 = u3(Q1, P119, P120, P2)
  Q0 = u3(Q0, P117, P118, P2)
  [Q0, Q1] = cx(Q0, Q1)
  [Q2, Q27] = cx(Q2, Q27)
  [Q2, Q28] = cx(Q2, Q28)
  Q2 = u3(Q2, P121, P122, P2)
  [Q0, Q2] = cx(Q0, Q2)
  [Q1, Q2] = cx(Q1, Q2)
}

Gate 0: [27, ]
Fusing gate 23(0) for rank 0
t 27
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 27
Matrix Multiplication (5, 1), mask 16
Gate 1: [0, 27, ]
Fusing gate 6(1) for rank 0
c,t 0,27
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 0,27
Matrix Multiplication (5, 2), mask 17
Gate 2: [28, ]
Fusing gate 23(0) for rank 0
t 28
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 28
Matrix Multiplication (5, 1), mask 8
Gate 3: [0, 28, ]
Fusing gate 6(1) for rank 0
c,t 0,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 0,28
Matrix Multiplication (5, 2), mask 9
Gate 4: [1, 27, ]
Fusing gate 6(1) for rank 0
c,t 1,27
Matrix Multiplication (5, 2), mask 18
Fusing gate 6(1) for rank 1
c,t 1,27
Matrix Multiplication (5, 2), mask 18
Gate 5: [1, 28, ]
Fusing gate 6(1) for rank 0
c,t 1,28
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 1,28
Matrix Multiplication (5, 2), mask 10
Gate 6: [1, ]
Fusing gate 23(0) for rank 0
t 1
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 1
Matrix Multiplication (5, 1), mask 2
Gate 7: [0, ]
Fusing gate 23(0) for rank 0
t 0
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 0
Matrix Multiplication (5, 1), mask 1
Gate 8: [0, 1, ]
Fusing gate 6(1) for rank 0
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 0,1
Matrix Multiplication (5, 2), mask 3
Gate 9: [2, 27, ]
Fusing gate 6(1) for rank 0
c,t 2,27
Matrix Multiplication (5, 2), mask 20
Fusing gate 6(1) for rank 1
c,t 2,27
Matrix Multiplication (5, 2), mask 20
Gate 10: [2, 28, ]
Fusing gate 6(1) for rank 0
c,t 2,28
Matrix Multiplication (5, 2), mask 12
Fusing gate 6(1) for rank 1
c,t 2,28
Matrix Multiplication (5, 2), mask 12
Gate 11: [2, ]
Fusing gate 23(0) for rank 0
t 2
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 2
Matrix Multiplication (5, 1), mask 4
Gate 12: [0, 2, ]
Fusing gate 6(1) for rank 0
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 0,2
Matrix Multiplication (5, 2), mask 5
Gate 13: [1, 2, ]
Fusing gate 6(1) for rank 0
c,t 1,2
Matrix Multiplication (5, 2), mask 6
Fusing gate 6(1) for rank 1
c,t 1,2
Matrix Multiplication (5, 2), mask 6
SHM Kernel Physical (65): [ 0,3,4,5,25,26,13]
shared_memory, qubits [0, 3, 4, 5, 26, 27, 28], gates CircuitSeq {
  [Q3, Q27] = cx(Q3, Q27)
  [Q3, Q28] = cx(Q3, Q28)
  Q3 = u3(Q3, P123, P124, P2)
  [Q0, Q3] = cx(Q0, Q3)
  [Q1, Q3] = cx(Q1, Q3)
  [Q2, Q3] = cx(Q2, Q3)
  [Q4, Q27] = cx(Q4, Q27)
  [Q4, Q28] = cx(Q4, Q28)
  Q4 = u3(Q4, P125, P126, P2)
  [Q0, Q4] = cx(Q0, Q4)
  [Q1, Q4] = cx(Q1, Q4)
  [Q2, Q4] = cx(Q2, Q4)
  [Q3, Q4] = cx(Q3, Q4)
  [Q5, Q27] = cx(Q5, Q27)
  [Q5, Q28] = cx(Q5, Q28)
  Q5 = u3(Q5, P127, P128, P2)
  [Q0, Q5] = cx(Q0, Q5)
  Q0 = u3(Q0, P175, P176, P2)
  [Q1, Q5] = cx(Q1, Q5)
  [Q2, Q5] = cx(Q2, Q5)
  [Q3, Q5] = cx(Q3, Q5)
  [Q4, Q5] = cx(Q4, Q5)
  [Q6, Q27] = cx(Q6, Q27)
  [Q7, Q27] = cx(Q7, Q27)
  [Q6, Q28] = cx(Q6, Q28)
  [Q7, Q28] = cx(Q7, Q28)
  [Q8, Q27] = cx(Q8, Q27)
  [Q8, Q28] = cx(Q8, Q28)
  [Q9, Q27] = cx(Q9, Q27)
  [Q10, Q27] = cx(Q10, Q27)
  [Q11, Q27] = cx(Q11, Q27)
  [Q12, Q27] = cx(Q12, Q27)
  [Q13, Q27] = cx(Q13, Q27)
  [Q14, Q27] = cx(Q14, Q27)
  [Q15, Q27] = cx(Q15, Q27)
  [Q16, Q27] = cx(Q16, Q27)
  [Q17, Q27] = cx(Q17, Q27)
  [Q18, Q27] = cx(Q18, Q27)
  [Q19, Q27] = cx(Q19, Q27)
  [Q20, Q27] = cx(Q20, Q27)
  [Q21, Q27] = cx(Q21, Q27)
  [Q22, Q27] = cx(Q22, Q27)
  [Q23, Q27] = cx(Q23, Q27)
  [Q24, Q27] = cx(Q24, Q27)
  [Q25, Q27] = cx(Q25, Q27)
  [Q26, Q27] = cx(Q26, Q27)
  [Q9, Q28] = cx(Q9, Q28)
  [Q10, Q28] = cx(Q10, Q28)
  [Q11, Q28] = cx(Q11, Q28)
  [Q12, Q28] = cx(Q12, Q28)
  [Q13, Q28] = cx(Q13, Q28)
  [Q14, Q28] = cx(Q14, Q28)
  [Q15, Q28] = cx(Q15, Q28)
  [Q16, Q28] = cx(Q16, Q28)
  [Q17, Q28] = cx(Q17, Q28)
  [Q18, Q28] = cx(Q18, Q28)
  [Q19, Q28] = cx(Q19, Q28)
  [Q20, Q28] = cx(Q20, Q28)
  [Q21, Q28] = cx(Q21, Q28)
  [Q22, Q28] = cx(Q22, Q28)
  [Q23, Q28] = cx(Q23, Q28)
  [Q24, Q28] = cx(Q24, Q28)
  [Q25, Q28] = cx(Q25, Q28)
  [Q26, Q28] = cx(Q26, Q28)
  [Q27, Q28] = cx(Q27, Q28)
}

Current Layout0: [13, 1, 2, 3, 4, 5, 15, 7, 8, 9, 10, 11, 12, 28, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 6, 0, SHM Kernel Physical (70): [ 27,7,8,9,10,11,12]
shared_memory, qubits [6, 7, 8, 9, 10, 11, 12], gates CircuitSeq {
  Q6 = u3(Q6, P129, P130, P2)
  [Q0, Q6] = cx(Q0, Q6)
  [Q1, Q6] = cx(Q1, Q6)
  [Q2, Q6] = cx(Q2, Q6)
  [Q3, Q6] = cx(Q3, Q6)
  [Q4, Q6] = cx(Q4, Q6)
  [Q5, Q6] = cx(Q5, Q6)
  Q7 = u3(Q7, P131, P132, P2)
  [Q0, Q7] = cx(Q0, Q7)
  [Q1, Q7] = cx(Q1, Q7)
  [Q2, Q7] = cx(Q2, Q7)
  [Q3, Q7] = cx(Q3, Q7)
  [Q4, Q7] = cx(Q4, Q7)
  [Q5, Q7] = cx(Q5, Q7)
  [Q6, Q7] = cx(Q6, Q7)
  Q8 = u3(Q8, P133, P134, P2)
  [Q0, Q8] = cx(Q0, Q8)
  [Q1, Q8] = cx(Q1, Q8)
  [Q2, Q8] = cx(Q2, Q8)
  [Q3, Q8] = cx(Q3, Q8)
  [Q4, Q8] = cx(Q4, Q8)
  [Q5, Q8] = cx(Q5, Q8)
  [Q6, Q8] = cx(Q6, Q8)
  [Q7, Q8] = cx(Q7, Q8)
  Q9 = u3(Q9, P173, P174, P2)
  [Q0, Q9] = cx(Q0, Q9)
  [Q1, Q9] = cx(Q1, Q9)
  Q10 = u3(Q10, P135, P136, P2)
  [Q0, Q10] = cx(Q0, Q10)
  [Q1, Q10] = cx(Q1, Q10)
  Q11 = u3(Q11, P137, P138, P2)
  [Q0, Q11] = cx(Q0, Q11)
  [Q1, Q11] = cx(Q1, Q11)
  Q12 = u3(Q12, P139, P140, P2)
  [Q0, Q12] = cx(Q0, Q12)
  [Q1, Q12] = cx(Q1, Q12)
  [Q2, Q9] = cx(Q2, Q9)
  [Q2, Q10] = cx(Q2, Q10)
  [Q2, Q11] = cx(Q2, Q11)
  [Q2, Q12] = cx(Q2, Q12)
  [Q3, Q9] = cx(Q3, Q9)
  [Q3, Q10] = cx(Q3, Q10)
  [Q3, Q11] = cx(Q3, Q11)
  [Q3, Q12] = cx(Q3, Q12)
  [Q4, Q9] = cx(Q4, Q9)
  [Q4, Q10] = cx(Q4, Q10)
  [Q4, Q11] = cx(Q4, Q11)
  [Q4, Q12] = cx(Q4, Q12)
  [Q5, Q9] = cx(Q5, Q9)
  [Q5, Q10] = cx(Q5, Q10)
  [Q5, Q11] = cx(Q5, Q11)
  [Q5, Q12] = cx(Q5, Q12)
  [Q6, Q9] = cx(Q6, Q9)
  [Q6, Q10] = cx(Q6, Q10)
  [Q6, Q11] = cx(Q6, Q11)
  [Q6, Q12] = cx(Q6, Q12)
  [Q7, Q9] = cx(Q7, Q9)
  [Q7, Q10] = cx(Q7, Q10)
  [Q7, Q11] = cx(Q7, Q11)
  [Q7, Q12] = cx(Q7, Q12)
  [Q8, Q9] = cx(Q8, Q9)
  [Q8, Q10] = cx(Q8, Q10)
  [Q8, Q11] = cx(Q8, Q11)
  [Q8, Q12] = cx(Q8, Q12)
  [Q9, Q10] = cx(Q9, Q10)
  [Q9, Q11] = cx(Q9, Q11)
  [Q10, Q11] = cx(Q10, Q11)
  [Q9, Q12] = cx(Q9, Q12)
  [Q10, Q12] = cx(Q10, Q12)
  [Q11, Q12] = cx(Q11, Q12)
}

Start fusing gates...
Reset qubit group map
(0, 13) (1, 1) (6, 15) (14, 14) (15, 16) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (12 gates): qubits [1, 13, 14, 15, 16], gates fusion, qubits [1, 13, 14, 15, 16], gates CircuitSeq {
  Q13 = u3(Q13, P141, P142, P2)
  [Q0, Q13] = cx(Q0, Q13)
  [Q1, Q13] = cx(Q1, Q13)
  Q14 = u3(Q14, P143, P144, P2)
  [Q0, Q14] = cx(Q0, Q14)
  [Q1, Q14] = cx(Q1, Q14)
  Q15 = u3(Q15, P145, P146, P2)
  [Q0, Q15] = cx(Q0, Q15)
  [Q1, Q15] = cx(Q1, Q15)
  Q16 = u3(Q16, P147, P148, P2)
  [Q0, Q16] = cx(Q0, Q16)
  [Q1, Q16] = cx(Q1, Q16)
}

Gate 0: [13, ]
Fusing gate 23(0) for rank 0
t 13
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 13
Matrix Multiplication (5, 1), mask 1
Gate 1: [0, 13, ]
Fusing gate 6(1) for rank 0
c,t 0,13
Fusing gate 6(1) for rank 1
c,t 0,13
Matrix Multiplication (5, 1), mask 1
Gate 2: [1, 13, ]
Fusing gate 6(1) for rank 0
c,t 1,13
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 1,13
Matrix Multiplication (5, 2), mask 3
Gate 3: [14, ]
Fusing gate 23(0) for rank 0
t 14
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 14
Matrix Multiplication (5, 1), mask 8
Gate 4: [0, 14, ]
Fusing gate 6(1) for rank 0
c,t 0,14
Fusing gate 6(1) for rank 1
c,t 0,14
Matrix Multiplication (5, 1), mask 8
Gate 5: [1, 14, ]
Fusing gate 6(1) for rank 0
c,t 1,14
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 1,14
Matrix Multiplication (5, 2), mask 10
Gate 6: [15, ]
Fusing gate 23(0) for rank 0
t 15
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 15
Matrix Multiplication (5, 1), mask 4
Gate 7: [0, 15, ]
Fusing gate 6(1) for rank 0
c,t 0,15
Fusing gate 6(1) for rank 1
c,t 0,15
Matrix Multiplication (5, 1), mask 4
Gate 8: [1, 15, ]
Fusing gate 6(1) for rank 0
c,t 1,15
Matrix Multiplication (5, 2), mask 6
Fusing gate 6(1) for rank 1
c,t 1,15
Matrix Multiplication (5, 2), mask 6
Gate 9: [16, ]
Fusing gate 23(0) for rank 0
t 16
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 16
Matrix Multiplication (5, 1), mask 16
Gate 10: [0, 16, ]
Fusing gate 6(1) for rank 0
c,t 0,16
Fusing gate 6(1) for rank 1
c,t 0,16
Matrix Multiplication (5, 1), mask 16
Gate 11: [1, 16, ]
Fusing gate 6(1) for rank 0
c,t 1,16
Matrix Multiplication (5, 2), mask 18
Fusing gate 6(1) for rank 1
c,t 1,16
Matrix Multiplication (5, 2), mask 18
Start fusing gates...
Reset qubit group map
(1, 1) (16, 17) (17, 18) (18, 19) (19, 20) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (12 gates): qubits [1, 17, 18, 19, 20], gates fusion, qubits [1, 17, 18, 19, 20], gates CircuitSeq {
  Q17 = u3(Q17, P149, P150, P2)
  [Q0, Q17] = cx(Q0, Q17)
  [Q1, Q17] = cx(Q1, Q17)
  Q18 = u3(Q18, P151, P152, P2)
  [Q0, Q18] = cx(Q0, Q18)
  [Q1, Q18] = cx(Q1, Q18)
  Q19 = u3(Q19, P153, P154, P2)
  [Q0, Q19] = cx(Q0, Q19)
  [Q1, Q19] = cx(Q1, Q19)
  Q20 = u3(Q20, P155, P156, P2)
  [Q0, Q20] = cx(Q0, Q20)
  [Q1, Q20] = cx(Q1, Q20)
}

Gate 0: [17, ]
Fusing gate 23(0) for rank 0
t 17
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 17
Matrix Multiplication (5, 1), mask 2
Gate 1: [0, 17, ]
Fusing gate 6(1) for rank 0
c,t 0,17
Fusing gate 6(1) for rank 1
c,t 0,17
Matrix Multiplication (5, 1), mask 2
Gate 2: [1, 17, ]
Fusing gate 6(1) for rank 0
c,t 1,17
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 1,17
Matrix Multiplication (5, 2), mask 3
Gate 3: [18, ]
Fusing gate 23(0) for rank 0
t 18
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 18
Matrix Multiplication (5, 1), mask 4
Gate 4: [0, 18, ]
Fusing gate 6(1) for rank 0
c,t 0,18
Fusing gate 6(1) for rank 1
c,t 0,18
Matrix Multiplication (5, 1), mask 4
Gate 5: [1, 18, ]
Fusing gate 6(1) for rank 0
c,t 1,18
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 1,18
Matrix Multiplication (5, 2), mask 5
Gate 6: [19, ]
Fusing gate 23(0) for rank 0
t 19
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 19
Matrix Multiplication (5, 1), mask 8
Gate 7: [0, 19, ]
Fusing gate 6(1) for rank 0
c,t 0,19
Fusing gate 6(1) for rank 1
c,t 0,19
Matrix Multiplication (5, 1), mask 8
Gate 8: [1, 19, ]
Fusing gate 6(1) for rank 0
c,t 1,19
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 1,19
Matrix Multiplication (5, 2), mask 9
Gate 9: [20, ]
Fusing gate 23(0) for rank 0
t 20
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 20
Matrix Multiplication (5, 1), mask 16
Gate 10: [0, 20, ]
Fusing gate 6(1) for rank 0
c,t 0,20
Fusing gate 6(1) for rank 1
c,t 0,20
Matrix Multiplication (5, 1), mask 16
Gate 11: [1, 20, ]
Fusing gate 6(1) for rank 0
c,t 1,20
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 1,20
Matrix Multiplication (5, 2), mask 17
Start fusing gates...
Reset qubit group map
(1, 1) (20, 21) (21, 22) (22, 23) (23, 24) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (12 gates): qubits [1, 21, 22, 23, 24], gates fusion, qubits [1, 21, 22, 23, 24], gates CircuitSeq {
  Q21 = u3(Q21, P157, P158, P2)
  [Q0, Q21] = cx(Q0, Q21)
  [Q1, Q21] = cx(Q1, Q21)
  Q22 = u3(Q22, P159, P160, P2)
  [Q0, Q22] = cx(Q0, Q22)
  [Q1, Q22] = cx(Q1, Q22)
  Q23 = u3(Q23, P161, P162, P2)
  [Q0, Q23] = cx(Q0, Q23)
  [Q1, Q23] = cx(Q1, Q23)
  Q24 = u3(Q24, P163, P164, P2)
  [Q0, Q24] = cx(Q0, Q24)
  [Q1, Q24] = cx(Q1, Q24)
}

Gate 0: [21, ]
Fusing gate 23(0) for rank 0
t 21
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 21
Matrix Multiplication (5, 1), mask 2
Gate 1: [0, 21, ]
Fusing gate 6(1) for rank 0
c,t 0,21
Fusing gate 6(1) for rank 1
c,t 0,21
Matrix Multiplication (5, 1), mask 2
Gate 2: [1, 21, ]
Fusing gate 6(1) for rank 0
c,t 1,21
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 1,21
Matrix Multiplication (5, 2), mask 3
Gate 3: [22, ]
Fusing gate 23(0) for rank 0
t 22
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 22
Matrix Multiplication (5, 1), mask 4
Gate 4: [0, 22, ]
Fusing gate 6(1) for rank 0
c,t 0,22
Fusing gate 6(1) for rank 1
c,t 0,22
Matrix Multiplication (5, 1), mask 4
Gate 5: [1, 22, ]
Fusing gate 6(1) for rank 0
c,t 1,22
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 1,22
Matrix Multiplication (5, 2), mask 5
Gate 6: [23, ]
Fusing gate 23(0) for rank 0
t 23
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 23
Matrix Multiplication (5, 1), mask 8
Gate 7: [0, 23, ]
Fusing gate 6(1) for rank 0
c,t 0,23
Fusing gate 6(1) for rank 1
c,t 0,23
Matrix Multiplication (5, 1), mask 8
Gate 8: [1, 23, ]
Fusing gate 6(1) for rank 0
c,t 1,23
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 1,23
Matrix Multiplication (5, 2), mask 9
Gate 9: [24, ]
Fusing gate 23(0) for rank 0
t 24
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 24
Matrix Multiplication (5, 1), mask 16
Gate 10: [0, 24, ]
Fusing gate 6(1) for rank 0
c,t 0,24
Fusing gate 6(1) for rank 1
c,t 0,24
Matrix Multiplication (5, 1), mask 16
Gate 11: [1, 24, ]
Fusing gate 6(1) for rank 0
c,t 1,24
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 1,24
Matrix Multiplication (5, 2), mask 17
SHM Kernel Physical (98): [ 0,14,6,15,16,17,18]
shared_memory, qubits [13, 14, 15, 16, 17, 18, 19], gates CircuitSeq {
  [Q2, Q13] = cx(Q2, Q13)
  [Q2, Q14] = cx(Q2, Q14)
  [Q2, Q15] = cx(Q2, Q15)
  [Q2, Q16] = cx(Q2, Q16)
  [Q2, Q17] = cx(Q2, Q17)
  [Q2, Q18] = cx(Q2, Q18)
  [Q2, Q19] = cx(Q2, Q19)
  [Q3, Q13] = cx(Q3, Q13)
  [Q3, Q14] = cx(Q3, Q14)
  [Q3, Q15] = cx(Q3, Q15)
  [Q3, Q16] = cx(Q3, Q16)
  [Q3, Q17] = cx(Q3, Q17)
  [Q3, Q18] = cx(Q3, Q18)
  [Q3, Q19] = cx(Q3, Q19)
  [Q4, Q13] = cx(Q4, Q13)
  [Q4, Q14] = cx(Q4, Q14)
  [Q4, Q15] = cx(Q4, Q15)
  [Q4, Q16] = cx(Q4, Q16)
  [Q4, Q17] = cx(Q4, Q17)
  [Q4, Q18] = cx(Q4, Q18)
  [Q4, Q19] = cx(Q4, Q19)
  [Q5, Q13] = cx(Q5, Q13)
  [Q5, Q14] = cx(Q5, Q14)
  [Q5, Q15] = cx(Q5, Q15)
  [Q5, Q16] = cx(Q5, Q16)
  [Q5, Q17] = cx(Q5, Q17)
  [Q5, Q18] = cx(Q5, Q18)
  [Q5, Q19] = cx(Q5, Q19)
  [Q6, Q13] = cx(Q6, Q13)
  [Q6, Q14] = cx(Q6, Q14)
  [Q6, Q15] = cx(Q6, Q15)
  [Q6, Q16] = cx(Q6, Q16)
  [Q6, Q17] = cx(Q6, Q17)
  [Q6, Q18] = cx(Q6, Q18)
  [Q6, Q19] = cx(Q6, Q19)
  [Q7, Q13] = cx(Q7, Q13)
  [Q7, Q14] = cx(Q7, Q14)
  [Q7, Q15] = cx(Q7, Q15)
  [Q7, Q16] = cx(Q7, Q16)
  [Q7, Q17] = cx(Q7, Q17)
  [Q7, Q18] = cx(Q7, Q18)
  [Q7, Q19] = cx(Q7, Q19)
  [Q8, Q13] = cx(Q8, Q13)
  [Q8, Q14] = cx(Q8, Q14)
  [Q8, Q15] = cx(Q8, Q15)
  [Q8, Q16] = cx(Q8, Q16)
  [Q8, Q17] = cx(Q8, Q17)
  [Q8, Q18] = cx(Q8, Q18)
  [Q8, Q19] = cx(Q8, Q19)
  [Q9, Q13] = cx(Q9, Q13)
  [Q10, Q13] = cx(Q10, Q13)
  [Q11, Q13] = cx(Q11, Q13)
  [Q12, Q13] = cx(Q12, Q13)
  [Q9, Q14] = cx(Q9, Q14)
  [Q10, Q14] = cx(Q10, Q14)
  [Q11, Q14] = cx(Q11, Q14)
  [Q12, Q14] = cx(Q12, Q14)
  [Q13, Q14] = cx(Q13, Q14)
  [Q9, Q15] = cx(Q9, Q15)
  [Q10, Q15] = cx(Q10, Q15)
  [Q11, Q15] = cx(Q11, Q15)
  [Q12, Q15] = cx(Q12, Q15)
  [Q13, Q15] = cx(Q13, Q15)
  [Q14, Q15] = cx(Q14, Q15)
  [Q9, Q16] = cx(Q9, Q16)
  [Q10, Q16] = cx(Q10, Q16)
  [Q11, Q16] = cx(Q11, Q16)
  [Q12, Q16] = cx(Q12, Q16)
  [Q13, Q16] = cx(Q13, Q16)
  [Q14, Q16] = cx(Q14, Q16)
  [Q15, Q16] = cx(Q15, Q16)
  [Q9, Q17] = cx(Q9, Q17)
  [Q10, Q17] = cx(Q10, Q17)
  [Q11, Q17] = cx(Q11, Q17)
  [Q12, Q17] = cx(Q12, Q17)
  [Q13, Q17] = cx(Q13, Q17)
  [Q14, Q17] = cx(Q14, Q17)
  [Q15, Q17] = cx(Q15, Q17)
  [Q16, Q17] = cx(Q16, Q17)
  [Q9, Q18] = cx(Q9, Q18)
  [Q10, Q18] = cx(Q10, Q18)
  [Q11, Q18] = cx(Q11, Q18)
  [Q12, Q18] = cx(Q12, Q18)
  [Q13, Q18] = cx(Q13, Q18)
  [Q14, Q18] = cx(Q14, Q18)
  [Q15, Q18] = cx(Q15, Q18)
  [Q16, Q18] = cx(Q16, Q18)
  [Q17, Q18] = cx(Q17, Q18)
  [Q9, Q19] = cx(Q9, Q19)
  [Q10, Q19] = cx(Q10, Q19)
  [Q11, Q19] = cx(Q11, Q19)
  [Q12, Q19] = cx(Q12, Q19)
  [Q13, Q19] = cx(Q13, Q19)
  [Q14, Q19] = cx(Q14, Q19)
  [Q15, Q19] = cx(Q15, Q19)
  [Q16, Q19] = cx(Q16, Q19)
  [Q17, Q19] = cx(Q17, Q19)
  [Q18, Q19] = cx(Q18, Q19)
}

Start fusing gates...
Reset qubit group map
(1, 1) (13, 28) (24, 25) (25, 26) (26, 27) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (13 gates): qubits [1, 25, 26, 27, 28], gates fusion, qubits [1, 25, 26, 27, 28], gates CircuitSeq {
  Q25 = u3(Q25, P165, P166, P2)
  [Q0, Q25] = cx(Q0, Q25)
  [Q1, Q25] = cx(Q1, Q25)
  Q26 = u3(Q26, P167, P168, P2)
  [Q0, Q26] = cx(Q0, Q26)
  [Q1, Q26] = cx(Q1, Q26)
  Q27 = u3(Q27, P169, P170, P2)
  [Q0, Q27] = cx(Q0, Q27)
  [Q1, Q27] = cx(Q1, Q27)
  Q28 = u3(Q28, P171, P172, P2)
  [Q0, Q28] = cx(Q0, Q28)
  [Q1, Q28] = cx(Q1, Q28)
  Q1 = u3(Q1, P177, P178, P2)
}

Gate 0: [25, ]
Fusing gate 23(0) for rank 0
t 25
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 25
Matrix Multiplication (5, 1), mask 4
Gate 1: [0, 25, ]
Fusing gate 6(1) for rank 0
c,t 0,25
Fusing gate 6(1) for rank 1
c,t 0,25
Matrix Multiplication (5, 1), mask 4
Gate 2: [1, 25, ]
Fusing gate 6(1) for rank 0
c,t 1,25
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 1,25
Matrix Multiplication (5, 2), mask 5
Gate 3: [26, ]
Fusing gate 23(0) for rank 0
t 26
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 26
Matrix Multiplication (5, 1), mask 8
Gate 4: [0, 26, ]
Fusing gate 6(1) for rank 0
c,t 0,26
Fusing gate 6(1) for rank 1
c,t 0,26
Matrix Multiplication (5, 1), mask 8
Gate 5: [1, 26, ]
Fusing gate 6(1) for rank 0
c,t 1,26
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 1,26
Matrix Multiplication (5, 2), mask 9
Gate 6: [27, ]
Fusing gate 23(0) for rank 0
t 27
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 27
Matrix Multiplication (5, 1), mask 16
Gate 7: [0, 27, ]
Fusing gate 6(1) for rank 0
c,t 0,27
Fusing gate 6(1) for rank 1
c,t 0,27
Matrix Multiplication (5, 1), mask 16
Gate 8: [1, 27, ]
Fusing gate 6(1) for rank 0
c,t 1,27
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 1,27
Matrix Multiplication (5, 2), mask 17
Gate 9: [28, ]
Fusing gate 23(0) for rank 0
t 28
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 28
Matrix Multiplication (5, 1), mask 2
Gate 10: [0, 28, ]
Fusing gate 6(1) for rank 0
c,t 0,28
Fusing gate 6(1) for rank 1
c,t 0,28
Matrix Multiplication (5, 1), mask 2
Gate 11: [1, 28, ]
Fusing gate 6(1) for rank 0
c,t 1,28
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 1,28
Matrix Multiplication (5, 2), mask 3
Gate 12: [1, ]
Fusing gate 23(0) for rank 0
t 1
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 1
Matrix Multiplication (5, 1), mask 1
SHM Kernel Physical (147): [ 19,20,21,22,23,24,25]
shared_memory, qubits [20, 21, 22, 23, 24, 25, 26], gates CircuitSeq {
  [Q2, Q20] = cx(Q2, Q20)
  [Q2, Q21] = cx(Q2, Q21)
  [Q2, Q22] = cx(Q2, Q22)
  [Q2, Q23] = cx(Q2, Q23)
  [Q2, Q24] = cx(Q2, Q24)
  [Q2, Q25] = cx(Q2, Q25)
  [Q2, Q26] = cx(Q2, Q26)
  [Q3, Q20] = cx(Q3, Q20)
  [Q3, Q21] = cx(Q3, Q21)
  [Q3, Q22] = cx(Q3, Q22)
  [Q3, Q23] = cx(Q3, Q23)
  [Q3, Q24] = cx(Q3, Q24)
  [Q3, Q25] = cx(Q3, Q25)
  [Q3, Q26] = cx(Q3, Q26)
  [Q4, Q20] = cx(Q4, Q20)
  [Q4, Q21] = cx(Q4, Q21)
  [Q4, Q22] = cx(Q4, Q22)
  [Q4, Q23] = cx(Q4, Q23)
  [Q4, Q24] = cx(Q4, Q24)
  [Q4, Q25] = cx(Q4, Q25)
  [Q4, Q26] = cx(Q4, Q26)
  [Q5, Q20] = cx(Q5, Q20)
  [Q5, Q21] = cx(Q5, Q21)
  [Q5, Q22] = cx(Q5, Q22)
  [Q5, Q23] = cx(Q5, Q23)
  [Q5, Q24] = cx(Q5, Q24)
  [Q5, Q25] = cx(Q5, Q25)
  [Q5, Q26] = cx(Q5, Q26)
  [Q6, Q20] = cx(Q6, Q20)
  [Q6, Q21] = cx(Q6, Q21)
  [Q6, Q22] = cx(Q6, Q22)
  [Q6, Q23] = cx(Q6, Q23)
  [Q6, Q24] = cx(Q6, Q24)
  [Q6, Q25] = cx(Q6, Q25)
  [Q6, Q26] = cx(Q6, Q26)
  [Q7, Q20] = cx(Q7, Q20)
  [Q7, Q21] = cx(Q7, Q21)
  [Q7, Q22] = cx(Q7, Q22)
  [Q7, Q23] = cx(Q7, Q23)
  [Q7, Q24] = cx(Q7, Q24)
  [Q7, Q25] = cx(Q7, Q25)
  [Q7, Q26] = cx(Q7, Q26)
  [Q8, Q20] = cx(Q8, Q20)
  [Q8, Q21] = cx(Q8, Q21)
  [Q8, Q22] = cx(Q8, Q22)
  [Q8, Q23] = cx(Q8, Q23)
  [Q8, Q24] = cx(Q8, Q24)
  [Q8, Q25] = cx(Q8, Q25)
  [Q8, Q26] = cx(Q8, Q26)
  [Q9, Q20] = cx(Q9, Q20)
  [Q10, Q20] = cx(Q10, Q20)
  [Q11, Q20] = cx(Q11, Q20)
  [Q12, Q20] = cx(Q12, Q20)
  [Q13, Q20] = cx(Q13, Q20)
  [Q14, Q20] = cx(Q14, Q20)
  [Q15, Q20] = cx(Q15, Q20)
  [Q16, Q20] = cx(Q16, Q20)
  [Q17, Q20] = cx(Q17, Q20)
  [Q18, Q20] = cx(Q18, Q20)
  [Q19, Q20] = cx(Q19, Q20)
  [Q9, Q21] = cx(Q9, Q21)
  [Q10, Q21] = cx(Q10, Q21)
  [Q11, Q21] = cx(Q11, Q21)
  [Q12, Q21] = cx(Q12, Q21)
  [Q13, Q21] = cx(Q13, Q21)
  [Q14, Q21] = cx(Q14, Q21)
  [Q15, Q21] = cx(Q15, Q21)
  [Q16, Q21] = cx(Q16, Q21)
  [Q17, Q21] = cx(Q17, Q21)
  [Q18, Q21] = cx(Q18, Q21)
  [Q19, Q21] = cx(Q19, Q21)
  [Q20, Q21] = cx(Q20, Q21)
  [Q9, Q22] = cx(Q9, Q22)
  [Q10, Q22] = cx(Q10, Q22)
  [Q11, Q22] = cx(Q11, Q22)
  [Q12, Q22] = cx(Q12, Q22)
  [Q13, Q22] = cx(Q13, Q22)
  [Q14, Q22] = cx(Q14, Q22)
  [Q15, Q22] = cx(Q15, Q22)
  [Q16, Q22] = cx(Q16, Q22)
  [Q17, Q22] = cx(Q17, Q22)
  [Q18, Q22] = cx(Q18, Q22)
  [Q19, Q22] = cx(Q19, Q22)
  [Q20, Q22] = cx(Q20, Q22)
  [Q21, Q22] = cx(Q21, Q22)
  [Q9, Q23] = cx(Q9, Q23)
  [Q10, Q23] = cx(Q10, Q23)
  [Q11, Q23] = cx(Q11, Q23)
  [Q12, Q23] = cx(Q12, Q23)
  [Q13, Q23] = cx(Q13, Q23)
  [Q14, Q23] = cx(Q14, Q23)
  [Q15, Q23] = cx(Q15, Q23)
  [Q16, Q23] = cx(Q16, Q23)
  [Q17, Q23] = cx(Q17, Q23)
  [Q18, Q23] = cx(Q18, Q23)
  [Q19, Q23] = cx(Q19, Q23)
  [Q20, Q23] = cx(Q20, Q23)
  [Q21, Q23] = cx(Q21, Q23)
  [Q22, Q23] = cx(Q22, Q23)
  [Q9, Q24] = cx(Q9, Q24)
  [Q10, Q24] = cx(Q10, Q24)
  [Q11, Q24] = cx(Q11, Q24)
  [Q12, Q24] = cx(Q12, Q24)
  [Q13, Q24] = cx(Q13, Q24)
  [Q14, Q24] = cx(Q14, Q24)
  [Q15, Q24] = cx(Q15, Q24)
  [Q16, Q24] = cx(Q16, Q24)
  [Q17, Q24] = cx(Q17, Q24)
  [Q18, Q24] = cx(Q18, Q24)
  [Q19, Q24] = cx(Q19, Q24)
  [Q20, Q24] = cx(Q20, Q24)
  [Q21, Q24] = cx(Q21, Q24)
  [Q22, Q24] = cx(Q22, Q24)
  [Q23, Q24] = cx(Q23, Q24)
  [Q9, Q25] = cx(Q9, Q25)
  [Q10, Q25] = cx(Q10, Q25)
  [Q11, Q25] = cx(Q11, Q25)
  [Q12, Q25] = cx(Q12, Q25)
  [Q13, Q25] = cx(Q13, Q25)
  [Q14, Q25] = cx(Q14, Q25)
  [Q15, Q25] = cx(Q15, Q25)
  [Q16, Q25] = cx(Q16, Q25)
  [Q17, Q25] = cx(Q17, Q25)
  [Q18, Q25] = cx(Q18, Q25)
  [Q19, Q25] = cx(Q19, Q25)
  [Q20, Q25] = cx(Q20, Q25)
  [Q21, Q25] = cx(Q21, Q25)
  [Q22, Q25] = cx(Q22, Q25)
  [Q23, Q25] = cx(Q23, Q25)
  [Q24, Q25] = cx(Q24, Q25)
  [Q9, Q26] = cx(Q9, Q26)
  [Q10, Q26] = cx(Q10, Q26)
  [Q11, Q26] = cx(Q11, Q26)
  [Q12, Q26] = cx(Q12, Q26)
  [Q13, Q26] = cx(Q13, Q26)
  [Q14, Q26] = cx(Q14, Q26)
  [Q15, Q26] = cx(Q15, Q26)
  [Q16, Q26] = cx(Q16, Q26)
  [Q17, Q26] = cx(Q17, Q26)
  [Q18, Q26] = cx(Q18, Q26)
  [Q19, Q26] = cx(Q19, Q26)
  [Q20, Q26] = cx(Q20, Q26)
  [Q21, Q26] = cx(Q21, Q26)
  [Q22, Q26] = cx(Q22, Q26)
  [Q23, Q26] = cx(Q23, Q26)
  [Q24, Q26] = cx(Q24, Q26)
  [Q25, Q26] = cx(Q25, Q26)
}

Start fusing gates...
Reset qubit group map
(2, 2) (3, 3) (4, 4) (13, 28) (26, 27) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (9 gates): qubits [2, 3, 4, 27, 28], gates fusion, qubits [2, 3, 4, 27, 28], gates CircuitSeq {
  [Q2, Q27] = cx(Q2, Q27)
  [Q2, Q28] = cx(Q2, Q28)
  Q2 = u3(Q2, P179, P180, P2)
  [Q3, Q27] = cx(Q3, Q27)
  [Q3, Q28] = cx(Q3, Q28)
  Q3 = u3(Q3, P181, P182, P2)
  [Q4, Q27] = cx(Q4, Q27)
  [Q4, Q28] = cx(Q4, Q28)
  Q4 = u3(Q4, P183, P184, P2)
}

Gate 0: [2, 27, ]
Fusing gate 6(1) for rank 0
c,t 2,27
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 2,27
Matrix Multiplication (5, 2), mask 17
Gate 1: [2, 28, ]
Fusing gate 6(1) for rank 0
c,t 2,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 2,28
Matrix Multiplication (5, 2), mask 9
Gate 2: [2, ]
Fusing gate 23(0) for rank 0
t 2
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 2
Matrix Multiplication (5, 1), mask 1
Gate 3: [3, 27, ]
Fusing gate 6(1) for rank 0
c,t 3,27
Matrix Multiplication (5, 2), mask 18
Fusing gate 6(1) for rank 1
c,t 3,27
Matrix Multiplication (5, 2), mask 18
Gate 4: [3, 28, ]
Fusing gate 6(1) for rank 0
c,t 3,28
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 3,28
Matrix Multiplication (5, 2), mask 10
Gate 5: [3, ]
Fusing gate 23(0) for rank 0
t 3
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 3
Matrix Multiplication (5, 1), mask 2
Gate 6: [4, 27, ]
Fusing gate 6(1) for rank 0
c,t 4,27
Matrix Multiplication (5, 2), mask 20
Fusing gate 6(1) for rank 1
c,t 4,27
Matrix Multiplication (5, 2), mask 20
Gate 7: [4, 28, ]
Fusing gate 6(1) for rank 0
c,t 4,28
Matrix Multiplication (5, 2), mask 12
Fusing gate 6(1) for rank 1
c,t 4,28
Matrix Multiplication (5, 2), mask 12
Gate 8: [4, ]
Fusing gate 23(0) for rank 0
t 4
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 4
Matrix Multiplication (5, 1), mask 4
SHM Kernel Physical (24): [ 5,19,20,21,22,26,13]
shared_memory, qubits [5, 20, 21, 22, 23, 27, 28], gates CircuitSeq {
  [Q5, Q27] = cx(Q5, Q27)
  [Q5, Q28] = cx(Q5, Q28)
  Q5 = u3(Q5, P185, P186, P2)
  [Q6, Q27] = cx(Q6, Q27)
  [Q7, Q27] = cx(Q7, Q27)
  [Q8, Q27] = cx(Q8, Q27)
  [Q9, Q27] = cx(Q9, Q27)
  [Q10, Q27] = cx(Q10, Q27)
  [Q11, Q27] = cx(Q11, Q27)
  [Q12, Q27] = cx(Q12, Q27)
  [Q13, Q27] = cx(Q13, Q27)
  [Q14, Q27] = cx(Q14, Q27)
  [Q15, Q27] = cx(Q15, Q27)
  [Q16, Q27] = cx(Q16, Q27)
  [Q17, Q27] = cx(Q17, Q27)
  [Q18, Q27] = cx(Q18, Q27)
  [Q19, Q27] = cx(Q19, Q27)
  [Q20, Q27] = cx(Q20, Q27)
  [Q21, Q27] = cx(Q21, Q27)
  [Q22, Q27] = cx(Q22, Q27)
  [Q23, Q27] = cx(Q23, Q27)
  [Q24, Q27] = cx(Q24, Q27)
  [Q25, Q27] = cx(Q25, Q27)
  [Q26, Q27] = cx(Q26, Q27)
}

SHM Kernel Physical (4): [ 27,7,23,24,25,26,13]
shared_memory, qubits [6, 7, 24, 25, 26, 27, 28], gates CircuitSeq {
  [Q6, Q28] = cx(Q6, Q28)
  Q6 = u3(Q6, P187, P188, P2)
  [Q7, Q28] = cx(Q7, Q28)
  Q7 = u3(Q7, P189, P190, P2)
}

SHM Kernel Physical (2): [ 8,19,20,21,22,23,13]
shared_memory, qubits [8, 20, 21, 22, 23, 24, 28], gates CircuitSeq {
  [Q8, Q28] = cx(Q8, Q28)
  Q8 = u3(Q8, P191, P192, P2)
}

SHM Kernel Physical (6): [ 9,10,11,24,25,26,13]
shared_memory, qubits [9, 10, 11, 25, 26, 27, 28], gates CircuitSeq {
  [Q9, Q28] = cx(Q9, Q28)
  Q9 = u3(Q9, P231, P232, P2)
  [Q10, Q28] = cx(Q10, Q28)
  Q10 = u3(Q10, P193, P194, P2)
  [Q11, Q28] = cx(Q11, Q28)
  Q11 = u3(Q11, P195, P196, P2)
}

Start fusing gates...
Reset qubit group map
(0, 13) (6, 15) (12, 12) (13, 28) (14, 14) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (8 gates): qubits [12, 13, 14, 15, 28], gates fusion, qubits [12, 13, 14, 15, 28], gates CircuitSeq {
  [Q12, Q28] = cx(Q12, Q28)
  Q12 = u3(Q12, P197, P198, P2)
  [Q13, Q28] = cx(Q13, Q28)
  Q13 = u3(Q13, P199, P200, P2)
  [Q14, Q28] = cx(Q14, Q28)
  Q14 = u3(Q14, P201, P202, P2)
  [Q15, Q28] = cx(Q15, Q28)
  Q15 = u3(Q15, P203, P204, P2)
}

Gate 0: [12, 28, ]
Fusing gate 6(1) for rank 0
c,t 12,28
Matrix Multiplication (5, 2), mask 12
Fusing gate 6(1) for rank 1
c,t 12,28
Matrix Multiplication (5, 2), mask 12
Gate 1: [12, ]
Fusing gate 23(0) for rank 0
t 12
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 12
Matrix Multiplication (5, 1), mask 4
Gate 2: [13, 28, ]
Fusing gate 6(1) for rank 0
c,t 13,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 13,28
Matrix Multiplication (5, 2), mask 9
Gate 3: [13, ]
Fusing gate 23(0) for rank 0
t 13
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 13
Matrix Multiplication (5, 1), mask 1
Gate 4: [14, 28, ]
Fusing gate 6(1) for rank 0
c,t 14,28
Matrix Multiplication (5, 2), mask 24
Fusing gate 6(1) for rank 1
c,t 14,28
Matrix Multiplication (5, 2), mask 24
Gate 5: [14, ]
Fusing gate 23(0) for rank 0
t 14
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 14
Matrix Multiplication (5, 1), mask 16
Gate 6: [15, 28, ]
Fusing gate 6(1) for rank 0
c,t 15,28
Matrix Multiplication (5, 2), mask 10
Fusing gate 6(1) for rank 1
c,t 15,28
Matrix Multiplication (5, 2), mask 10
Gate 7: [15, ]
Fusing gate 23(0) for rank 0
t 15
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 15
Matrix Multiplication (5, 1), mask 2
Start fusing gates...
Reset qubit group map
(13, 28) (15, 16) (16, 17) (17, 18) (18, 19) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (8 gates): qubits [16, 17, 18, 19, 28], gates fusion, qubits [16, 17, 18, 19, 28], gates CircuitSeq {
  [Q16, Q28] = cx(Q16, Q28)
  Q16 = u3(Q16, P205, P206, P2)
  [Q17, Q28] = cx(Q17, Q28)
  Q17 = u3(Q17, P207, P208, P2)
  [Q18, Q28] = cx(Q18, Q28)
  Q18 = u3(Q18, P209, P210, P2)
  [Q19, Q28] = cx(Q19, Q28)
  Q19 = u3(Q19, P211, P212, P2)
}

Gate 0: [16, 28, ]
Fusing gate 6(1) for rank 0
c,t 16,28
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 16,28
Matrix Multiplication (5, 2), mask 3
Gate 1: [16, ]
Fusing gate 23(0) for rank 0
t 16
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 16
Matrix Multiplication (5, 1), mask 2
Gate 2: [17, 28, ]
Fusing gate 6(1) for rank 0
c,t 17,28
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 17,28
Matrix Multiplication (5, 2), mask 5
Gate 3: [17, ]
Fusing gate 23(0) for rank 0
t 17
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 17
Matrix Multiplication (5, 1), mask 4
Gate 4: [18, 28, ]
Fusing gate 6(1) for rank 0
c,t 18,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 18,28
Matrix Multiplication (5, 2), mask 9
Gate 5: [18, ]
Fusing gate 23(0) for rank 0
t 18
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 18
Matrix Multiplication (5, 1), mask 8
Gate 6: [19, 28, ]
Fusing gate 6(1) for rank 0
c,t 19,28
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 19,28
Matrix Multiplication (5, 2), mask 17
Gate 7: [19, ]
Fusing gate 23(0) for rank 0
t 19
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 19
Matrix Multiplication (5, 1), mask 16
Start fusing gates...
Reset qubit group map
(13, 28) (19, 20) (20, 21) (21, 22) (22, 23) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (8 gates): qubits [20, 21, 22, 23, 28], gates fusion, qubits [20, 21, 22, 23, 28], gates CircuitSeq {
  [Q20, Q28] = cx(Q20, Q28)
  Q20 = u3(Q20, P213, P214, P2)
  [Q21, Q28] = cx(Q21, Q28)
  Q21 = u3(Q21, P215, P216, P2)
  [Q22, Q28] = cx(Q22, Q28)
  Q22 = u3(Q22, P217, P218, P2)
  [Q23, Q28] = cx(Q23, Q28)
  Q23 = u3(Q23, P219, P220, P2)
}

Gate 0: [20, 28, ]
Fusing gate 6(1) for rank 0
c,t 20,28
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 20,28
Matrix Multiplication (5, 2), mask 3
Gate 1: [20, ]
Fusing gate 23(0) for rank 0
t 20
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 20
Matrix Multiplication (5, 1), mask 2
Gate 2: [21, 28, ]
Fusing gate 6(1) for rank 0
c,t 21,28
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 21,28
Matrix Multiplication (5, 2), mask 5
Gate 3: [21, ]
Fusing gate 23(0) for rank 0
t 21
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 21
Matrix Multiplication (5, 1), mask 4
Gate 4: [22, 28, ]
Fusing gate 6(1) for rank 0
c,t 22,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 22,28
Matrix Multiplication (5, 2), mask 9
Gate 5: [22, ]
Fusing gate 23(0) for rank 0
t 22
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 22
Matrix Multiplication (5, 1), mask 8
Gate 6: [23, 28, ]
Fusing gate 6(1) for rank 0
c,t 23,28
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 23,28
Matrix Multiplication (5, 2), mask 17
Gate 7: [23, ]
Fusing gate 23(0) for rank 0
t 23
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 23
Matrix Multiplication (5, 1), mask 16
Start fusing gates...
Reset qubit group map
(13, 28) (23, 24) (24, 25) (25, 26) (26, 27) current Layout: [13,1,2,3,4,5,15,7,8,9,10,11,12,28,14,16,17,18,19,20,21,22,23,24,25,26,27,6,0,]
Fusing Kernel (9 gates): qubits [24, 25, 26, 27, 28], gates fusion, qubits [24, 25, 26, 27, 28], gates CircuitSeq {
  [Q24, Q28] = cx(Q24, Q28)
  Q24 = u3(Q24, P221, P222, P2)
  [Q25, Q28] = cx(Q25, Q28)
  Q25 = u3(Q25, P223, P224, P2)
  [Q26, Q28] = cx(Q26, Q28)
  Q26 = u3(Q26, P225, P226, P2)
  [Q27, Q28] = cx(Q27, Q28)
  Q27 = u3(Q27, P227, P228, P2)
  Q28 = u3(Q28, P229, P230, P2)
}

Gate 0: [24, 28, ]
Fusing gate 6(1) for rank 0
c,t 24,28
Matrix Multiplication (5, 2), mask 3
Fusing gate 6(1) for rank 1
c,t 24,28
Matrix Multiplication (5, 2), mask 3
Gate 1: [24, ]
Fusing gate 23(0) for rank 0
t 24
Matrix Multiplication (5, 1), mask 2
Fusing gate 23(0) for rank 1
t 24
Matrix Multiplication (5, 1), mask 2
Gate 2: [25, 28, ]
Fusing gate 6(1) for rank 0
c,t 25,28
Matrix Multiplication (5, 2), mask 5
Fusing gate 6(1) for rank 1
c,t 25,28
Matrix Multiplication (5, 2), mask 5
Gate 3: [25, ]
Fusing gate 23(0) for rank 0
t 25
Matrix Multiplication (5, 1), mask 4
Fusing gate 23(0) for rank 1
t 25
Matrix Multiplication (5, 1), mask 4
Gate 4: [26, 28, ]
Fusing gate 6(1) for rank 0
c,t 26,28
Matrix Multiplication (5, 2), mask 9
Fusing gate 6(1) for rank 1
c,t 26,28
Matrix Multiplication (5, 2), mask 9
Gate 5: [26, ]
Fusing gate 23(0) for rank 0
t 26
Matrix Multiplication (5, 1), mask 8
Fusing gate 23(0) for rank 1
t 26
Matrix Multiplication (5, 1), mask 8
Gate 6: [27, 28, ]
Fusing gate 6(1) for rank 0
c,t 27,28
Matrix Multiplication (5, 2), mask 17
Fusing gate 6(1) for rank 1
c,t 27,28
Matrix Multiplication (5, 2), mask 17
Gate 7: [27, ]
Fusing gate 23(0) for rank 0
t 27
Matrix Multiplication (5, 1), mask 16
Fusing gate 23(0) for rank 1
t 27
Matrix Multiplication (5, 1), mask 16
Gate 8: [28, ]
Fusing gate 23(0) for rank 0
t 28
Matrix Multiplication (5, 1), mask 1
Fusing gate 23(0) for rank 1
t 28
Matrix Multiplication (5, 1), mask 1
Compilation Done! 
Num Shuffles: 3
Num FUSION Kernel: 12
Num SHM Kernel: 16
Start Simulating...
[warmup] size total:2147483648
NCCL comm nRanks: 2, i am 0
I am 0, mask 1, I am sending to 0
I am 0, mask 1, I am sending to 1
NCCL comm nRanks: 2, i am 1
I am 1, mask 1, I am sending to 0
I am 1, mask 1, I am sending to 1
hello checking all2all
Init State Vectors!
Using NCCL for cross-node shuffle
My physical id:0, 1
NCCL comm nRanks: 2, i am 0
I am 0, mask 1, I am sending to 0
I am 0, mask 1, I am sending to 1
My physical id:1, 1
NCCL comm nRanks: 2, i am 1
I am 1, mask 1, I am sending to 0
I am 1, mask 1, I am sending to 1
[NCCL Rank 0] Shuffle Time: 36.18ms
[NCCL Rank 1] Shuffle Time: 38.62ms
Using NCCL for cross-node shuffle
My physical id:0, 1
NCCL comm nRanks: 2, i am 0
I am 0, mask 1, I am sending to 0
I am 0, mask 1, I am sending to 1
My physical id:1, 1
NCCL comm nRanks: 2, i am 1
I am 1, mask 1, I am sending to 0
I am 1, mask 1, I am sending to 1
[NCCL Rank 0] Shuffle Time: 31.01ms
[NCCL Rank 1] Shuffle Time: 34.61ms
Using NCCL for cross-node shuffle
My physical id:0, 1
NCCL comm nRanks: 2, i am 0
I am 0, mask 1, I am sending to 0
I am 0, mask 1, I am sending to 1
My physical id:1, 1
NCCL comm nRanks: 2, i am 1
I am 1, mask 1, I am sending to 0
I am 1, mask 1, I am sending to 1
[NCCL Rank 0] Shuffle Time: 37.28ms
[NCCL Rank 1] Shuffle Time: 30.45ms
Finish Simulating! Total: 12 FUSE Kernel, 16 SHM Kernel, 3 Shuffles.
[NCCL Rank 0] Total Simulation Time: 623.48ms
[NCCL Rank 1] Total Simulation Time: 626.11ms
[MPI Rank 0]: Shuffle 0 cost 37.40ms on average.
[MPI Rank 0]: Shuffle 1 cost 32.81ms on average.
[MPI Rank 0]: Shuffle 2 cost 33.87ms on average.
Solving ILP for num_qubits=29, num_local_qubits=28, num_global_qubits=0, num_iterations=1...
Available solvers: ['PULP_CBC_CMD', 'HiGHS_CMD']
Running HiGHS 1.5.0 [date: 2023-11-09, git hash: 8a114449a]
Copyright (c) 2022 HiGHS under MIT licence terms
Number of BV entries in BOUNDS section is 2726
MIP  c8b74ad0ede64396baeff74e009fa19c-pulp has 10413 rows; 2727 cols; 19546 nonzeros; 2726 integer variables
Presolving model
7715 rows, 29 cols, 1363 nonzeros
Presolve: Infeasible

Solving report
  Status            Infeasible
  Primal bound      inf
  Dual bound        -inf
  Gap               inf
  Solution status   -
  Timing            0.01 (total)
                    0.01 (presolve)
                    0.00 (postsolve)
  Nodes             0
  LP iterations     0 (total)
                    0 (strong br.)
                    0 (separation)
                    0 (heuristics)
Writing the solution to /tmp/c8b74ad0ede64396baeff74e009fa19c-pulp.sol
Solving ILP for num_qubits=29, num_local_qubits=28, num_global_qubits=0, num_iterations=2...
Available solvers: ['PULP_CBC_CMD', 'HiGHS_CMD']
Running HiGHS 1.5.0 [date: 2023-11-09, git hash: 8a114449a]
Copyright (c) 2022 HiGHS under MIT licence terms
Number of BV entries in BOUNDS section is 4176
MIP  62e3b80596b8411bbcb9ad487a816659-pulp has 15693 rows; 4176 cols; 31552 nonzeros; 4176 integer variables
Presolving model
12936 rows, 1421 cols, 13195 nonzeros
5164 rows, 1363 cols, 10411 nonzeros
Presolve: Infeasible

Solving report
  Status            Infeasible
  Primal bound      inf
  Dual bound        -inf
  Gap               inf
  Solution status   -
  Timing            0.03 (total)
                    0.03 (presolve)
                    0.00 (postsolve)
  Nodes             0
  LP iterations     0 (total)
                    0 (strong br.)
                    0 (separation)
                    0 (heuristics)
Writing the solution to /tmp/62e3b80596b8411bbcb9ad487a816659-pulp.sol
Solving ILP for num_qubits=29, num_local_qubits=28, num_global_qubits=0, num_iterations=3...
Available solvers: ['PULP_CBC_CMD', 'HiGHS_CMD']
Running HiGHS 1.5.0 [date: 2023-11-09, git hash: 8a114449a]
Copyright (c) 2022 HiGHS under MIT licence terms
Number of BV entries in BOUNDS section is 5626
MIP  3fde5b50bb134ea3b2d96afd1953805c-pulp has 20973 rows; 5626 cols; 43558 nonzeros; 5626 integer variables
Presolving model
18157 rows, 2813 cols, 25027 nonzeros
10443 rows, 1527 cols, 13629 nonzeros
Presolve: Infeasible

Solving report
  Status            Infeasible
  Primal bound      inf
  Dual bound        -inf
  Gap               inf
  Solution status   -
  Timing            0.12 (total)
                    0.11 (presolve)
                    0.00 (postsolve)
  Nodes             0
  LP iterations     0 (total)
                    0 (strong br.)
                    0 (separation)
                    0 (heuristics)
Writing the solution to /tmp/3fde5b50bb134ea3b2d96afd1953805c-pulp.sol
Solving ILP for num_qubits=29, num_local_qubits=28, num_global_qubits=0, num_iterations=4...
Available solvers: ['PULP_CBC_CMD', 'HiGHS_CMD']
Running HiGHS 1.5.0 [date: 2023-11-09, git hash: 8a114449a]
Copyright (c) 2022 HiGHS under MIT licence terms
Number of BV entries in BOUNDS section is 7076
MIP  21908d5f535c4871a4b20d6b8c96bc3f-pulp has 26253 rows; 7076 cols; 55564 nonzeros; 7076 integer variables
Presolving model
23378 rows, 4205 cols, 36859 nonzeros
15664 rows, 4205 cols, 34191 nonzeros
Objective function is integral with scale 1

Solving MIP model with:
   15664 rows
   4205 cols (4205 binary, 0 integer, 0 implied int., 0 continuous)
   34191 nonzeros

        Nodes      |    B&B Tree     |            Objective Bounds              |  Dynamic Constraints |       Work      
     Proc. InQueue |  Leaves   Expl. | BestBound       BestSol              Gap |   Cuts   InLp Confl. | LpIters     Time

         0       0         0   0.00%   0               inf                  inf        0      0      0         0     0.9s
         0       0         0   0.00%   0               inf                  inf        0      0      2      1591     1.1s

37.3% inactive integer columns, restarting

Solving report
  Status            Infeasible
  Primal bound      inf
  Dual bound        inf
  Gap               inf
  Solution status   -
  Timing            5.00 (total)
                    1.29 (presolve)
                    0.00 (postsolve)
  Nodes             0
  LP iterations     14789 (total)
                    0 (strong br.)
                    1864 (separation)
                    11334 (heuristics)
Writing the solution to /tmp/21908d5f535c4871a4b20d6b8c96bc3f-pulp.sol
Solving ILP for num_qubits=29, num_local_qubits=28, num_global_qubits=0, num_iterations=5...
Available solvers: ['PULP_CBC_CMD', 'HiGHS_CMD']
Running HiGHS 1.5.0 [date: 2023-11-09, git hash: 8a114449a]
Copyright (c) 2022 HiGHS under MIT licence terms
Number of BV entries in BOUNDS section is 8526
MIP  4f8899d331e84bc2a5882900a8439601-pulp has 31533 rows; 8526 cols; 67570 nonzeros; 8526 integer variables
Presolving model
28599 rows, 5597 cols, 48691 nonzeros
20885 rows, 5597 cols, 46023 nonzeros
Objective function is integral with scale 1

Solving MIP model with:
   20885 rows
   5597 cols (5597 binary, 0 integer, 0 implied int., 0 continuous)
   46023 nonzeros

        Nodes      |    B&B Tree     |            Objective Bounds              |  Dynamic Constraints |       Work      
     Proc. InQueue |  Leaves   Expl. | BestBound       BestSol              Gap |   Cuts   InLp Confl. | LpIters     Time

         0       0         0   0.00%   0               inf                  inf        0      0      0         0     1.1s
         0       0         0   0.00%   0               inf                  inf        0      0      2      1615     1.4s
 L       0       0         0   0.00%   0               4                100.00%      454      1    214      3801     4.2s

16.6% inactive integer columns, restarting
Model after restart has 8543 rows, 2431 cols (2431 bin., 0 int., 0 impl., 0 cont.), and 18260 nonzeros

         0       0         0   0.00%   0               4                100.00%        1      0      0      6536     8.0s
         0       0         0   0.00%   0               4                100.00%        1      0      2      7743     8.1s
         0       0         0   0.00%   0               4                100.00%     1357     27      2      9363    13.8s
         0       0         0   0.00%   0               4                100.00%     2851     90      2     10593    18.9s
        55       3        22  11.52%   0.99999         4                 75.00%     3298     42    743     12714    23.9s

Solving report
  Status            Optimal
  Primal bound      4
  Dual bound        4
  Gap               0% (tolerance: 0.01%)
  Solution status   feasible
                    4 (objective)
                    0 (bound viol.)
                    9.32587340685e-15 (int. viol.)
                    0 (row viol.)
  Timing            26.46 (total)
                    4.84 (presolve)
                    0.00 (postsolve)
  Nodes             245
  LP iterations     21888 (total)
                    0 (strong br.)
                    6516 (separation)
                    3356 (heuristics)
Writing the solution to /tmp/4f8899d331e84bc2a5882900a8439601-pulp.sol
[MPI Rank 0]: Destroyed everthing!
Time Cost: 708274 us
Destroyed the simulator
